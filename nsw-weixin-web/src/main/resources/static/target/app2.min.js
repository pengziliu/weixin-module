/*global angular*/
(function (angular) {
	"use strict";
	angular.module('message', ['platform']).config(['$stateProvider',
		function ($stateProvider) {
			$stateProvider.state('wechat.message', {
				url: '/message',
				templateUrl: globals.basAppRoute + 'message/partials/message.html',
				controller:'messageCtrl'
			}).state('wechat.chat', {
				url: '/chat',
				templateUrl: globals.basAppRoute + 'message/partials/chat.html'
			}).state('wechat.message.list', {
				url: '/list',
				templateUrl: globals.basAppRoute + 'message/partials/message-list.html',
				controller: 'messageListCtrl'
			});
		}]);
}(angular));
(function (angular) {
	"use strict";
	angular.module('message').factory('messageChatSvc', ['$http', 'basDataSvc', 'platformModalSvc', 'messageSvc',
		function ($http, basDataSvc, platformModalSvc, messageSvc) {
			var options = {
				name: 'messageChatSvc',
				list: {
					listUri: 'message/msgList',
					enablePaging: true,
					enableSearch: true,
					selectionMode: 'single',
					pageSize: 20,
					prepareSearchParam: function (option) {
						option.openId = messageSvc.getOpenId();
					}
				}
			};
			var service = basDataSvc.createInstance(options), openId;
			service.setOpenId = function setOpenId(id) {
				openId = id;
				service.saveCache();
			};

			service.getOpenId = function getOpenId() {
				return openId;
			};

			return service;
		}]);

}(angular));
(function (angular) {
	"use strict";
	angular.module('materials').factory('messageCacheDataSvc', ['$timeout', function ($timeout) {
		var service = {};

		//resolve cache to bas class, for save data to storage when page reloaded
		//liangcl 2016-06-27
		service.resolveCache = function resolveCache() {
			var svc = this;
			return {
				openId: svc.getOpenId(),
				searchoptions: svc.getSearchOptions()
			};
		};

		var doApplyCache = function doApplyCache(cache) {
			var svc = this,
				openId = cache.openId,
				searchOptions = cache.searchoptions || {};

			if (searchOptions) {
				angular.extend(svc.getSearchOptions(), searchOptions);
			}
			if (openId) {
				svc.setOpenId(openId);
			}
			svc.loadData({displayTip: true});
		};

		//load cache form storage and do init view
		//liangcl 2016-06-27
		service.applyCache = function applyCache(cache) {
			var svc = this;
			$timeout(function () {
				doApplyCache.call(svc, cache);
			});
		};


		return service;
	}]);
}(angular));
(function (angular) {
	"use strict";
	angular.module('message').factory('messageSvc', ['$http', 'basDataSvc', 'platformModalSvc', 'nswGlobals', 'messageCacheDataSvc',
		function ($http, basDataSvc, platformModalSvc, nswGlobals, messageCacheDataSvc) {
			var openid, service;
			var options = {
				name: 'messageSvc',
				uri: 'message/sendMsg',
				item: {
					default: {
						msgType: 'txt',
						content: ''
					},
					afterCreated: function (item) {
						item.appId = nswGlobals.getValue('appId');
						item.openId = this.getOpenId();
					}
				},
				list: {
					listUri: 'message/msgList',
					enablePaging: true,
					enableSearch: true,
					selectionMode: 'single',
					pageSize: 20,
					prepareSearchParam: function (option) {
						option.dayNum = this.getSearchOptions().dayNum || 0;
					}
				},
				cache: {
					getCache: messageCacheDataSvc.resolveCache,
					applyCache: messageCacheDataSvc.applyCache
				}
			};
			service = basDataSvc.createInstance(options);
			service.setOpenId = function setOpenId(id) {
				openid = id;
				service.saveCache();
			};
			service.getOpenId = function getOpenId() {
				return openid;
			};
			service.send = function send(item, msgId) {
				item.appId = nswGlobals.getValue('appId');
				item.msgType = "txt";
				var options = {
					method: 'post',
					url: globals.basAppRoot + 'message/sendMsg',
					data: item,
					params: {
						'msgId': msgId
					}
				};
				return $http(options).then(function (res) {
					if (res.data.isSuccess) {
						service.loadData();
						platformModalSvc.showSuccessTip('发送成功');
					} else {
						platformModalSvc.showWarmingMessage(res.data.data, '发送失败');
					}

					return res.data;
				}, function (error) {
					platformModalSvc.showWarmingMessage('发送失败:' + error, '发送失败');
				});
			};

			service.setMsgType = function setMsgType(type, material) {
				var currentItem = service.getCurrentItem();
				currentItem.msgType = type || '';
				if (material && !!material.id) {
					currentItem.mediaId = material.id || '';
				}
				switch (type) {
					case 'txt':
						if (currentItem.content) {
							currentItem.msgType = type;
						}
						break;
					case 'pic':
						if (currentItem.fileId) {
							currentItem.msgType = type;
						}
						break;
					case 'news':
						if (currentItem.mediaId) {
							currentItem.msgType = type;
						}
						break;
				}

			};

			service.getSelectedType = function getSelectedType() {
				var currentItem = service.getCurrentItem();
				if (currentItem.fileId) {
					return 'pic';
				} else if (currentItem.mediaId) {
					return 'news';
				}
				return 'txt';
			};

			return service;
		}]);

}(angular));
/*global angular*/
(function (angular) {
	"use strict";
	angular.module("message").controller("messageChatCtrl", ['$scope', 'messageSvc', 'basDetailCtrlSvc', '$timeout','$state',
		function ($scope, messageSvc, basDetailCtrlSvc, $timeout,$state) {
			basDetailCtrlSvc.createInstance($scope, messageSvc, {
				listState: 'wechat.chat',
				notCopyCurrent: true,
				tip: {
					showLoading: function () {
						return $scope.currentItem.msgType === 'pic';
					}
				}
			});
			if($scope.currentItem&&!$scope.currentItem.$$new){
				$state.go('wechat.message.list');
			}
			$scope.setMsgType = messageSvc.setMsgType;

			var resetForm = function resetForm() {
				$scope.selectTab('txt');
				$scope.create();
				if ($scope.formchat) {
					$scope.formchat.$setPristine();
				}
			};

			var currentItemChanged = function currentItemChanged(item) {
				$scope.selectTab(item.msgType || 'txt');
			};

			messageSvc.registerItemCreated(resetForm);
			var save = $scope.save;
			$scope.save = function(flog,form,saveOption){
				save.call(flog,form,saveOption).then(function(){
					form.$setPristine();
				});
			};
			$timeout(function () {
				messageSvc.registerCurrentItemChanged(currentItemChanged);
			});

			$scope.$on('$destroy', function () {
				messageSvc.unregisterItemCreated(resetForm);
				messageSvc.unregisterCurrentItemChanged(currentItemChanged);
			});

		}]);
}(angular));
(function (angular) {
	"use strict";
	angular.module("autoReply").controller("messageChatListCtrl", ['$scope', '$timeout', 'messageChatSvc', 'basListCtrlSvc', 'platformModalSvc',
		function ($scope, $timeout, messageChatSvc, basListCtrlSvc) {
			basListCtrlSvc.createInstance($scope, messageChatSvc, {
				detailState: 'wechat.chat'
			});
			$scope.displayList = angular.copy($scope.dataList);

			var searchOptions = angular.copy($scope.searchOptions),
				stopRefresh = false;

			var doSearchData = function doSearchData(){
				$scope.searchData({displayTip: false}).then(function (res) {
					if (res && !stopRefresh) {
						doRefersh(3000);
					}
				});
			};

			var doRefersh = function doRefresh(eclipse) {
				$timeout(function () {
					doSearchData();
				}, eclipse);
			};

			doRefersh();


			var onListLoaded = function onListLoaded(data) {
				if (searchOptions.totalRows !== $scope.searchOptions.totalRows ||
					searchOptions.pageNum !== $scope.searchOptions.pageNum ||
					$scope.displayList.length !== $scope.dataList.length) {
					$scope.displayList = angular.copy(data);
					searchOptions = angular.copy($scope.searchOptions);
				}
			};

			messageChatSvc.registerListLoaded(onListLoaded);

			$scope.$on('$destroy', function () {
				stopRefresh = true;
				messageChatSvc.unregisterListLoaded(onListLoaded);
			});

		}]);


}(angular));

/**
 * Created by yaoyc on 2016/5/25.
 */
(function (angular) {
	"use strict";
	angular.module("message").controller("messageCtrl", ['$scope', '$state',
		function ($scope, $state) {
			$scope.tabs = {};
			$scope.selectTab = function selectTab(key, route) {
				_.forEach($scope.tabs, function (tab, prop) {
					$scope.tabs[prop] = false;
				});
				$scope.tabs[key] = true;
				$scope.tab = key;
			};

			$scope.goToList = function goToList(){
				$scope.selectTab(2,'list');
			};

			$scope.goToDetail = function goToDetail(){
				$scope.selectTab(1,'detail');
			};
		}]);
}(angular));
(function(angular){
	"use strict";
	angular.module("autoReply").controller("messageListCtrl",['$scope','messageSvc','basListCtrlSvc','messageChatSvc',function($scope,messageSvc,basListCtrlSvc,messageChatSvc){
		basListCtrlSvc.createInstance($scope, messageSvc,{
			detailState:'wechat.chat'
		});
		$scope.searchData();
		$scope.searchOptions.dayNum = 0;
		$scope.isShow = function isShow(item){
			if(_.has(item,'reply.content')){
						item.reply.content = '';
			}
			item.isShow = !item.isShow;
		};

		$scope.timeFrame = [{
			_id: 0,
			name: '全部'
		},{
			_id: 1,
			name: '今天'
		}, {
			_id: 2,
			name: '昨天'
		}, {
			_id: 3,
			name: '前天'
		}, {
			_id: 4,
			name: '最近五天'
		}];

		$scope.send = function send(item,form){
			form.$valid= false;
			var data = item.reply;
			data.openId = item.fromUserName;
			messageSvc.send(data,item.msgId);
		};
		$scope.search = function search(){
			$scope.searchOptions.pageNum = 1;
			$scope.searchData();
		};
		$scope.msgCreate = function msgCteate(item){
			messageSvc.setOpenId(item.fromUserName);
			messageChatSvc.loadSearchData();
			$scope.create();
		};
        messageSvc.registerListLoaded(function(){
	        if(!$scope.searchOptions.hasOwnProperty('dayNum')){
		        $scope.searchOptions.dayNum = 0;
	        }

        });

		$scope.$on('$destroy',function(){
			messageSvc.unregisterListLoaded();
		});
	}]);


}(angular));

/*global angular*/
(function (angular) {
	"use strict";
	angular.module('qrCode', ['platform']).config(['$stateProvider', '$urlRouterProvider',
		function ($stateProvider,$urlRouterProvider) {
			$urlRouterProvider.when('/wechat/QRCode','/wechat/QRCode/detail');
			$stateProvider.state('wechat.QRCode', {
				url: '/QRCode',
				templateUrl: globals.basAppRoute + 'qr-code/partials/qr-code.html',
				controller: 'QRCodeCtrl'
			}).state('wechat.QRCode.detail', {
				url: '/detail',
				templateUrl: globals.basAppRoute + 'qr-code/partials/qr-code-detail.html',
				controller: 'QRCodeDetailCtrl'
			}).state('wechat.QRCode.list', {
				url: '/list',
				templateUrl: globals.basAppRoute + 'qr-code/partials/qr-code-list.html',
				controller: 'QRCodeListCtrl'
			}).state('wechat.qrCodeCharts', {
				url: '/qrCodeCharts',
				controller: 'qrCodeChartsCtrl',
				templateUrl: globals.basAppRoute + 'qr-code/partials/qr-code-charts.html'
			}).state('wechat.qrCodeCharts.all', {
				url: '/all',
				templateUrl: globals.basAppRoute + 'qr-code/partials/qr-code-charts-all.html',
				controller: 'qrCodeChartsAllCtrl'
			}).state('wechat.qrCodeCharts.detail', {
				url: '/detail?isCheck',
				templateUrl: globals.basAppRoute + 'qr-code/partials/qr-code-charts-detail.html',
				controller: 'qrCodeChartsDetailCtrl'
			});
		}]);
}(angular));
(function (angular) {
	"use strict";
	angular.module('qrCode').factory('qrCodeChartsAllSvc', ['$http', 'basDataSvc', 'platformModalSvc', 'nswGlobals','$q','platformDateSvc',
		function ($http, basDataSvc, platformModalSvc, nswGlobals,$q,platformDateSvc) {
			var options = {
				requireAppId: true,
				list: {
					listUri: 'qrCodeMana/list',
					enablePaging: true,
					enableSearch:true,
					pageSize: 10,
					selectionMode: 'multi',
					prepareSearchParam:function( options){
						options.beginDate = service.getBeginDate();
						options.endDate = service.getEndDate();

					}
				}
			};
			var service = basDataSvc.createInstance(options);
			service.getBeginDate = function getBeginDate(){
				return start;
			};
			service.setBeginDate = function setBeginDate(date){
				start = date;
			};
			service.getEndDate = function getEndDate(){
				return end;
			};
			service.setEndDate = function setEndDate(date){
				end = date;
			};
			service.downQrCodeData = function downQrCodeData(){
				var url = globals.basAppRoot+'qrCodeMana/downQrCodeData?appId='+nswGlobals.getValue('appId')+'&beginDate='+service.getBeginDate()+'&endDate='+service.getEndDate();
				window.location.href = url;

			};
			service.dropDownQrCodeList = function dropDownQrCodeList(){
				var defer = $q.defer();
				var options ={
					method:'get',
					url:globals.basAppRoot+'qrCodeMana/list',
					params:{
						appId:nswGlobals.getValue('appId'),
						pageSize: 1000000,
						pageNum:1
					}
				};
				return $http(options).then(function(res){
					if(res.data.isSuccess){
						defer.resolve(res.data.data);
					}else{
						defer.reject(res.data.data);
					}
					return defer.promise;
				});

			};
			var start = platformDateSvc.dateRange({range:30}),end= new Date().format('yyyy-MM-dd');
			return service;
		}]);

}(angular));
(function (angular) {
	"use strict";
	angular.module('qrCode').factory('qrCodeChartsSvc', ['$http', 'basDataSvc', 'platformMessenger', 'nswGlobals', '$q', 'platformDateSvc',
		function ($http, basDataSvc, PlatformMessenger, nswGlobals, $q, platformDateSvc) {
			var loadCodeScanDev = new PlatformMessenger(), chartId = '';
			var options = {
				requireAppId: true,
				list: {
					listUri: 'qrCodeMana/scanOneQrcodeList',
					enablePaging: true,
					enableSearch: true,
					pageSize: 10,
					selectionMode: 'multi',
					prepareSearchParam: function (options) {
						options.beginDate = service.getListBeginDate();
						options.endDate = service.getListEndDate();
						options.id = service.getChartId();

					}
				}
			};
			var service = basDataSvc.createInstance(options);

			service.getChartsInfo = function getChartsInfo(id) {
				var defer = $q.defer();
				var options = {
					method: 'get',
					url: globals.basAppRoot + 'qrCodeMana/todayStatistics',
					params: {
						appId: nswGlobals.getValue('appId'),
						id: id
					}
				};
				return $http(options).then(function (res) {
					if (res.data.isSuccess) {
						defer.resolve(res.data.data);
					} else {
						defer.reject(res.data.data);
					}
					return defer.promise;
				});

			};
			service.qrCodeScanDev = function qrCodeScanDev() {
				var defer = $q.defer();
				var options = {
					method: 'get',
					url: globals.basAppRoot + 'qrCodeMana/qrCodeScanDev',
					params: {
						id: service.getChartId(),
						beginDate: service.getBeginDate(),
						endDate: service.getEndDate()
					}
				};
				return $http(options).then(function (res) {
					if (res.data.isSuccess) {
						service.buildDateList(service.getBeginDate(), service.getEndDate(), res.data.data);
						defer.resolve(res.data.data);
					} else {
						defer.reject(res.data.data);
					}
					return defer.promise;
				});

			};
			service.downQrCodeData = function downQrCodeData() {
				var url = globals.basAppRoot + 'qrCodeMana/scanOneQrcodeListExport?id=' + service.getChartId() + '&beginDate=' + service.getListBeginDate() + '&endDate=' + service.getListEndDate();
				window.location.href = url;

			};

			service.buildDateList = function (startDate, endDate, data) {
				var dataArr = [];

				function getDate(datestr) {
					var temp = datestr.split("-");
					return new Date(temp[0], temp[1], temp[2]);
				}

				function filterDate(data, filter) {
					return _.find(data, function (o) {
						return o.scanDate === filter;
					});
				}

				var startTime = getDate(startDate);
				var endTime = getDate(endDate);
				while ((endTime.getTime() - startTime.getTime()) >= 0) {
					var year = startTime.getFullYear();
					var month = startTime.getMonth().toString().length === 1 ? "0" + startTime.getMonth().toString() : startTime.getMonth();
					var day = startTime.getDate().toString().length === 1 ? "0" + startTime.getDate() : startTime.getDate();
					var num = filterDate(data, year + "-" + month + "-" + day);
					if (num) {
						dataArr.push({scanDate: year + "-" + month + "-" + day, count: num.count});
					} else {
						dataArr.push({scanDate: year + "-" + month + "-" + day, count: 0});
						console.log(year + "-" + month + "-" + day);
					}
					startTime.setDate(startTime.getDate() + 1);
				}
				loadCodeScanDev.fire(dataArr);
			};
			service.getBeginDate = function getBeginDate() {
				return start;
			};
			service.setBeginDate = function setBeginDate(date) {
				start = date;
			};
			service.getEndDate = function getEndDate() {
				return end;
			};
			service.setEndDate = function setEndDate(date) {
				end = date;
			};
			service.getListBeginDate = function getListBeginDate() {
				return startList;
			};
			service.setListBeginDate = function setListBeginDate(date) {
				startList = date;
			};
			service.getListEndDate = function getListEndDate() {
				return endList;
			};
			service.setListEndDate = function setListEndDate(date) {
				endList = date;
			};
			service.getChartId = function getChartId() {
				return chartId;
			};
			service.setChartId = function setChartId(data) {
				chartId = data;
			};
			service.registerloadCodeScanDev = function registerloadCodeScanDev(headler) {
				loadCodeScanDev.register(headler);
			};
			service.unregisterloadCodeScanDev = function unregisterloadCodeScanDev(headler) {
				loadCodeScanDev.unregister(headler);
			};
			var start = platformDateSvc.dateRange(), end = new Date().format('yyyy-MM-dd'), startList = platformDateSvc.dateRange(), endList = new Date().format('yyyy-MM-dd');
			return service;
		}]);

}(angular));
(function (angular) {
	"use strict";
	angular.module('qrCode').factory('QRCodeSvc', ['$http', 'basDataSvc', 'platformModalSvc', 'nswGlobals','$q',
		function ($http, basDataSvc, platformModalSvc, nswGlobals,$q) {
			var options = {
				requireAppId: true,
				uri:'qrCodeMana/qrCode',
				item: {
					default: {
						groupid: -100,
						replyType: 'txt',
						reply:false,
						type:'forever',
						style:'normal'
					},
					afterCreated:function(item){
						item.appId = nswGlobals.getValue('appId');
					},
					prepareRemove:function(service, options){
						options.params.appId = nswGlobals.getValue('appId');
						options.params.ids = options.params.id;
					}
				},
				list: {
					listUri: 'qrCodeMana/list',
					enablePaging: true,
					enableSearch:true,
					pageSize: 10,
					selectionMode: 'multi'
				}
			};
			var service = basDataSvc.createInstance(options),urlType = 'forever',isNew = true;

			service.showArtcileLib = function showArtcileLib() {
				platformModalSvc.showModal({
					controller: 'articleLibCtrl',
					templateUrl: globals.basAppRoute + 'materials/templates/articles-lib.html',
					size: 'lg',
					options: {
						selected: {
							id: service.selected.key
						}
					}
				}).then(function (material) {
					return material;
				});
			};
			service.getQrUrl = function getQrUrl(){
				var defer = $q.defer();
				var options = {
					method:'get',
					url:globals.basAppRoot+'qrCodeMana/getQrCodeUrl',
					params:{
						type:service.getUrlType(),
						appId:nswGlobals.getValue('appId')
					}
				};
				return $http(options).then(function(res){
					if(res.data.isSuccess){
						defer.resolve(res.data.data);
					}else{
						defer.reject(res.data.data);
					}
					return defer.promise;
				});

			};
			service.uploadQrCode = function uploadQrCode(data){
				var defer = $q.defer();
				var options = {
					method:'post',
					url:'/wx/file/local/uploadBase64',
					data:{image:data}
				};
				return $http(options).then(function(res){
					if(res.data.isSuccess){
						defer.resolve(res.data.data);
					}else{
						defer.reject(res.data.data);
					}
					return defer.promise;
				});
			};
			service.download = function download(url){

					window.open(globals.basAppRoot+'qrCodeMana/downQrCode?url='+url);

			};
			service.removeItems = function removeItems(ids) {
				var options = {
					method: 'delete',
					url: globals.basAppRoot + 'qrCodeMana/qrCode',
					params: {ids: ids, appId: nswGlobals.getValue('appId')},
					headers: {'logContent':encodeURI('批量操作')}
				};
				return $http(options).then(function (res) {
					if (res.data.isSuccess) {
						var pageNum = service.getSearchOptions();
						if (service.getDataList().length === ids.length&&pageNum>1) {
							pageNum.pageNum--;
							service.loadData();
						}
						service.loadData();
						platformModalSvc.showSuccessTip(res.data.data);
					} else {
						platformModalSvc.showWarmingMessage(res.data.data, '删除失败');
					}
					return res.data;
				});
			};
			service.getQrCodeSize = function getQrCodeSize(url,size) {
				var link = 'http://'+globals.basImageDomain+'/'+url +"?imageMogr2/thumbnail/"+size*28+"x"+size*28;
				window.location.href = globals.basAppRoot+'qrCodeMana/downQrCode?url='+link;
			};
			service.setUrlType = function setUrlType(type){
				urlType = type;
			};
			service.getUrlType = function getUrlType(){
				return urlType;
			};
			service.setIsNew = function setIsNew(type){
				isNew = type;
			};
			service.getIsNew = function getIsNew(){
				return isNew;
			};
			return service;
		}]);

}(angular));

/*global angular*/
(function (angular) {
	"use strict";
	angular.module("qrCode").controller("qrCodeChartsAllCtrl", ['$scope', 'qrCodeChartsAllSvc', 'basListCtrlSvc','qrCodeChartsSvc','$state',
		function ($scope, qrCodeChartsAllSvc, basListCtrlSvc,qrCodeChartsSvc,$state) {
			basListCtrlSvc.createInstance($scope,qrCodeChartsAllSvc,{});
			$scope.searchData();
			if(qrCodeChartsSvc.getChartId()){
				$state.go('wechat.qrCodeCharts.detail');
			}
			$scope.getNewList= function getNewList(data){
				qrCodeChartsAllSvc.setBeginDate(data.start);
				qrCodeChartsAllSvc.setEndDate(data.end);
				$scope.searchData();
			};
			$scope.downQrCodeData = function downQrCodeData(){
				qrCodeChartsAllSvc.downQrCodeData();
			};
		}]);
}(angular));
/*global angular*/
(function (angular) {
	"use strict";
	angular.module('qrCode').controller("qrCodeChartsCtrl", ['$scope','$stateParams', 'qrCodeChartsSvc','$state','qrCodeChartsAllSvc','platformMenuDataSvc',
		function ($scope,$stateParams, qrCodeChartsSvc,$state,qrCodeChartsAllSvc,platformMenuDataSvc) {

			$scope.options = {};

			$scope.options.groupTypes = [{id: -100, name: '查看所有二维码'}, {id: -99, name: '查看单个二维码'}];
			$scope.groupTypeSelected = function groupTypeSelected(data){
					if(data !== -99){
						qrCodeChartsSvc.setChartId('');
						$state.go('wechat.qrCodeCharts.all');
						qrCodeChartsSvc.getChartsInfo().then(function (data) {
							$scope.options.info = data;
							$scope.options.id = null;
						});
					}
				qrCodeChartsAllSvc.loadData();
			};
			$scope.getId = function getId(id){
				if(id){
					qrCodeChartsSvc.setChartId(id);
					qrCodeChartsSvc.getChartsInfo(id).then(function (data) {
						$scope.options.info = data;
						$state.go('wechat.qrCodeCharts.detail');
					});
					qrCodeChartsSvc.qrCodeScanDev().then(function(data){
						$scope.options.echartData = data;
					});
				}
			};
			if(qrCodeChartsSvc.getChartId()){
				$scope.options.groupType =-99;
				$scope.options.id = qrCodeChartsSvc.getChartId();
				$scope.getId(qrCodeChartsSvc.getChartId());

			}else{
				qrCodeChartsSvc.getChartsInfo().then(function (data) {
					$scope.options.info = data;
				});
				$scope.options.groupType =-100;
			}
			var qrCodeListLoaded = function qrCodeListLoaded(){
				qrCodeChartsAllSvc.dropDownQrCodeList().then(function(data){
					$scope.qrCodeList = data.dataList;
				});
			};
			qrCodeChartsAllSvc.registerListLoaded(qrCodeListLoaded);
			$scope.downQrCodeData = function downQrCodeData(){
				qrCodeChartsSvc.downQrCodeData();
			};
			$scope.$on('$destroy',function(){
				$scope.options.groupType =-100;
				qrCodeChartsSvc.setChartId('');
				qrCodeChartsAllSvc.unregisterListLoaded(qrCodeListLoaded);
			});
		}]);
}(angular));
/*global angular*/
(function (angular) {
	"use strict";
	angular.module("qrCode").controller("qrCodeChartsDetailCtrl", ['$scope', '$state', 'qrCodeChartsSvc', 'basListCtrlSvc', 'platformDateSvc',
		function ($scope, $state, qrCodeChartsSvc, basListCtrlSvc, platformDateSvc) {
			basListCtrlSvc.createInstance($scope, qrCodeChartsSvc, {});
			if (!qrCodeChartsSvc.getChartId()) {
				$state.go('wechat.qrCodeCharts.all');
			}
			qrCodeChartsSvc.qrCodeScanDev().then(function (data) {
				$scope.options.echartData = data;
			});
			$scope.lineConfig = {
				theme: 'vintage',
				dataLoaded: true
			};


			$scope.lineOption = {
				tooltip: {
					trigger: 'axis'
				},
				toolbox: {
					show: true,
					feature: {
						dataZoom: {
							yAxisIndex: 'none'
						},
						dataView: {readOnly: false},
						magicType: {type: ['line', 'bar']},
						restore: {},
						saveAsImage: {}
					}
				},
				xAxis: {
					type: 'category',
					boundaryGap: false,
					data: []
				},
				yAxis: {
					type: 'value',
					axisLine: {
						show: false
					},
					minInterval: 1
				},
				series: [
					{
						name: '扫描次数',
						type: 'line',
						data: [],
						symbol: 'circle',
						itemStyle: {
							normal: {
								color: '#f08300',
								lineStyle: {
									color: '#f08300',
									width: 1
								},
								borderColor: '#f08300'
							}
						}
					}
				]
			};


			$scope.options.dateRange = [{
				range: {
					end: new Date().format('yyyy-MM-dd'),
					start: platformDateSvc.dateRange()
				}, name: '最近7天'},
				{
					range: {end: new Date().format('yyyy-MM-dd'), start: platformDateSvc.dateRange({range: 15})},
					name: '最近15天'
				},
				{
					range: {end: new Date().format('yyyy-MM-dd'), start: platformDateSvc.dateRange({range: 30})},
					name: '最近30天'
				}];


			$scope.options.dateRangeInfo = {end: new Date().format('yyyy-MM-dd'), start: platformDateSvc.dateRange()};
			$scope.options.dateRangeListInfo = $scope.options.dateRangeInfo;
			var loadCodeScanDev = function loadCodeScanDev(data) {
				$scope.lineOption.xAxis.data = _.map(data, 'scanDate');
				$scope.lineOption.series[0].data = _.map(data, 'count');
				$scope.searchData();
			};
			$scope.getDateRangeList = function getDateRangeList(data) {
				qrCodeChartsSvc.setListBeginDate(data.start);
				qrCodeChartsSvc.setListEndDate(data.end);
				$scope.searchData();
			};
			qrCodeChartsSvc.registerloadCodeScanDev(loadCodeScanDev);
			$scope.getNewEchat = function getNewEchat(data) {
				qrCodeChartsSvc.setBeginDate(data.start);
				qrCodeChartsSvc.setEndDate(data.end);
				$scope.options.dateRangeListInfo = data;
				$scope.getDateRangeList(data);
				qrCodeChartsSvc.qrCodeScanDev();
			};
			$scope.$on("$destroy", function () {
				qrCodeChartsSvc.unregisterloadCodeScanDev(loadCodeScanDev);
			});
		}]);
}(angular));
/**
 * Created by yaoyc on 2016/5/25.
 */
(function (angular) {
	"use strict";
	angular.module("qrCode").controller("QRCodeCtrl", ['$scope', '$state', 'QRCodeSvc',
		function ($scope, $state, QRCodeSvc) {
			$scope.tabs = {};
			$scope.tabTitle = '新建二维码';
			$scope.tabInfo = 0;
			var _route = '', _key = 1;
			$scope.selectTab = function selectTab(key, route) {
				_route = route;
				_key = key;

				if (key === 1) {
					$scope.tabInfo++;
					_.forEach($scope.tabs, function (tab, prop) {
						$scope.tabs[prop] = false;
					});
					$scope.tabs[key] = true;
					$scope.tab = key;
					if (route) {
						$state.go('wechat.QRCode.' + route);
					}
				} else if (key === 2) {
					$scope.$broadcast('checkFormDirty');
				}
				//QRCodeSvc.createNew();
			};

			$scope.$on('formDirtyInfo', function (e, options) {
				if (!options.stop || options.dirty === false) {
					$scope.tabInfo++;
					_.forEach($scope.tabs, function (tab, prop) {
						$scope.tabs[prop] = false;
					});
					$scope.tabs[_key] = true;
					$scope.tab = _key;
					if (_route) {
						$state.go('wechat.QRCode.' + _route);
					}
					QRCodeSvc.createNew();
				} else {
					$scope.tabs[1] = true;
					$scope.tab = 1;
				}

			});

			$scope.goToList = function goToList() {
				$scope.selectTab(2, 'list');
			};

			$scope.goToDetail = function goToDetail() {
				$scope.tabInfo = 0;
				$scope.selectTab(1, 'detail');
			};

			var currentItemChanged = function currentItemChanged(item) {
				$scope.tabTitle = item.id ? '编辑二维码' : '新建二维码';
			};

			QRCodeSvc.registerCurrentItemChanged(currentItemChanged);

			$scope.$on('$destroy', function () {
				QRCodeSvc.unregisterCurrentItemChanged(currentItemChanged);
			});
		}]);
}(angular));
/*global angular*/
(function (angular) {
	"use strict";
	angular.module("qrCode").controller("QRCodeDetailCtrl", ['$scope', 'nswGlobals', 'QRCodeSvc', 'basDetailCtrlSvc', 'memberCtgDataSvc',
		function ($scope, nswGlobals, QRCodeSvc, basDetailCtrlSvc, memberCtgDataSvc) {
			basDetailCtrlSvc.createInstance($scope, QRCodeSvc, {
				tip: {
					loading: {
						message: '消息发送中...!'
					}
				},
				notCopyCurrent: true,
				listState: 'wechat.QRCode.list'
			});
			//$scope.options.groupType = -100;
			$scope.groupTypes = [{id: -100, name: '全部用户'}, {id: -99, name: '按标签选择'}];
			$scope.options.groupTypes =  [{id: 'temp', name: '临时二维码'}, {id: 'forever', name: '永久二维码'}];
			$scope.options.qrCodeInfo = {mode : 0};
			var init = function init() {
				$scope.options.groupType = $scope.currentItem.groupId  ? -99 : -100;
				if( $scope.currentItem.groupId){
					$scope.currentItem.groupId = parseInt($scope.currentItem.groupId);
				}
				if (!$scope.currentItem || !$scope.currentItem.replyType) {
					$scope.create();
				} else if ($scope.currentItem.appId !== nswGlobals.getValue('appId')) {
					$scope.create();
				}else{
					$scope.options.qrCodeUrl = $scope.currentItem.qrCodeUrl;
					if($scope.currentItem.replyType ==='txt'){
						$scope.currentItem.content = $scope.currentItem.replyContent;
					}else if($scope.currentItem.replyType ==='pic'){
						 $scope.currentItem.fileId = $scope.currentItem.replyContent;
					}else{
						$scope.currentItem.mediaId = $scope.currentItem.replyContent;
					}

				}
				if($scope.currentItem.$$new){
					QRCodeSvc.getQrUrl().then(function(data){
						$scope.currentItem.url = data.url;
						$scope.currentItem.scene_id = data.scene_id;
					});
				}
			};

			$scope.groupTypeSelected = function groupTypeSelected(value) {
				if (value === -100) {
					$scope.options.groupType = -100;
					$scope.currentItem.groupId = null;
				} else {
					$scope.options.groupType = -99;
				}
			};

			$scope.imgSelected = function imgSelected() {
				if ($scope.currentItem.hasOwnProperty('mediaId')) {
					$scope.omitAttr( $scope.currentItem,'mediaId');
				}
				if ($scope.currentItem.hasOwnProperty('content')) {
					delete  $scope.currentItem.content;
				}
			};
			$scope.articleSelected = function articleSelected() {
				if ($scope.currentItem.hasOwnProperty('fileId')) {
					delete  $scope.currentItem.fileId;
				}
				if ($scope.currentItem.hasOwnProperty('content')) {
					delete  $scope.currentItem.content;
				}
			};

			$scope.textChanged = function textChanged() {
				if ($scope.currentItem.hasOwnProperty('mediaId')) {
					delete  $scope.currentItem.mediaId;
				}
				if ($scope.currentItem.hasOwnProperty('fileId')) {
					delete  $scope.currentItem.fileId;
				}
			};

			$scope.reset = function reset(form) {
				var type = $scope.currentItem.massType;
				$scope.create();
				$scope.currentItem.massType = type;
				form.$setPristine();
			};
			var memberCatalogLoaded = function memberCatalogLoaded(catalogs) {
				$scope.memberCatalogs  = catalogs;
			};
			var onItemCreated = function onItemCreated() {
				$scope.goToList();
				$scope.create();
			};
			$scope.changeType = function changeType(type){
				QRCodeSvc.setUrlType(type);
				QRCodeSvc.getQrUrl().then(function(data){
					$scope.currentItem.url = data.url;
					$scope.currentItem.scene_id = data.scene_id;
				});
			};
			$scope.getQrCodeUrl = function getQrCodeUrl(data){
				$scope.options.qrCodeUrl = data;
			};
			var basReset = $scope.reset;
			$scope.reset = function reset(form){
				if($scope.currentItem.style !== 'normal'){
					$('#cancelLogo').click();
				}
				$scope.currentItem.style = 'normal';

				basReset.call(this,form);
			};
			$scope.saveItem = function saveItem(form,saveOptions){
				form.$setPristine();
				if($scope.options.qrCodeUrl!==$scope.currentItem.qrCodeUrl){
					QRCodeSvc.uploadQrCode($scope.options.qrCodeUrl).then(function(data){
						$scope.currentItem.qrCodeUrl = data;
						if($scope.currentItem.replyType ==='txt'){
							$scope.currentItem.replyContent = $scope.currentItem.content;
						}else if($scope.currentItem.replyType ==='pic'){
							$scope.currentItem.replyContent = $scope.currentItem.fileId;
						}else{
							$scope.currentItem.replyContent = $scope.currentItem.mediaId;
						}
						$scope.omitAttr( $scope.currentItem,'mediaId','content','fileId');
						$scope.save(true,form,$scope.currentItem.replyContent);
					});
				}else{
					if($scope.currentItem.replyType ==='txt'){
						$scope.currentItem.replyContent = $scope.currentItem.content;
					}else if($scope.currentItem.replyType ==='pic'){
						$scope.currentItem.replyContent = $scope.currentItem.fileId;
					}else{
						$scope.currentItem.replyContent = $scope.currentItem.mediaId;
					}
					$scope.omitAttr( $scope.currentItem,'mediaId','content','fileId');
					$scope.save(true,form,$scope.currentItem.replyContent);
				}
			};


			memberCtgDataSvc.getSearchOptions().isMass = true;
			memberCtgDataSvc.loadData();
			memberCtgDataSvc.registerListLoaded(memberCatalogLoaded);
			QRCodeSvc.registerItemCreated(onItemCreated);
			QRCodeSvc.registerItemUpdated(onItemCreated);

			//$scope.create();
			$scope.$on('$destroy', function () {
				memberCtgDataSvc.unregisterListLoaded(memberCatalogLoaded);
				QRCodeSvc.unregisterItemCreated(onItemCreated);
				QRCodeSvc.unregisterItemUpdated(onItemCreated);
			});

			//$scope.create();

			init();
		}]);
}(angular));
/**
 * Created by yaoyc on 2016/9/6.
 */

/*global angular*/
(function (angular) {
    "use strict";
    angular.module('qrCode').controller('qrCodeDownload', ['$scope', 'QRCodeSvc',
        function ($scope, QRCodeSvc) {
            $scope.getQrCodeSize = function getQrCodeSize(size){
                QRCodeSvc.getQrCodeSize($scope.modalOptions.url,size);
            };

        }]);
}(angular));

/*global angular*/
(function (angular) {
	"use strict";
	angular.module("qrCode").controller("QRCodeListCtrl", ['$scope', 'QRCodeSvc', 'basListCtrlSvc','platformModalSvc','$state','qrCodeChartsSvc','platformMenuDataSvc',
		function ($scope, QRCodeSvc, basListCtrlSvc,platformModalSvc,$state,qrCodeChartsSvc,platformMenuDataSvc) {
			basListCtrlSvc.createInstance($scope,QRCodeSvc,{
				detailState: 'wechat.QRCode.detail'
			});
			//var searchOptions = angular.copy($scope.searchOptions);
			$scope.searchData();
			$scope.editItem = function editItem(item){
				$scope.edit(item);
				$scope.goToDetail();
			};
			$scope.getQrUrl = function getQrUrl(){
				QRCodeSvc.getQrUrl($scope.currentItem.type);
			};
			$scope.removeitems = function removeitems() {
				platformModalSvc.showConfirmMessage('确定要批量删除二维码吗？', '温馨提示').then(function () {
					QRCodeSvc.removeItems(_.map(QRCodeSvc.getSelectedItems(), 'id')).then(function () {
						if ($scope.dataList.length <= QRCodeSvc.getSelectedItems().length&&$scope.searchOptions.pageNum!==1) {
							$scope.searchOptions.pageNum--;
							$scope.searchData();
						}
					});
					//var listSize = keyWordReplyDataSvc.getSelectedItems().length;
					//$scope.searchOptions.totalRows -= listSize;

				});

			};
			$scope.download = function download(url){
				platformModalSvc.showModal({
					controller: 'qrCodeDownload',
					templateUrl: globals.basAppRoute + 'qr-code/partials/qr-code-download.html',
					size: 'md',
					options: {
						url:url
					}
				});
			};
			$scope.goChart = function goChart(item){
				qrCodeChartsSvc.setChartId(item.id);
				platformMenuDataSvc.selectMenu('二维码统计');
				//$state.go('wechat.qrCodeCharts.detail',{isCheck:true});
			};
			$scope.downloadImg = function download(url){
				var imgWindow = window.open(url);
				imgWindow.document.execCommand('SaveAs ');

			};
			$scope.$on('$destroy',function(){
				if($state.current.name ==='wechat.QRCode'){
					$scope.goToDetail();
				}
				//
			});

		}]);
}(angular));

/*global angular*/(function (angular) {
	"use strict";
	angular.module('messageTemplate', ['platform','member']).config(['$stateProvider', '$urlRouterProvider',
		function ($stateProvider,$urlRouterProvider) {
			$urlRouterProvider.when("/wechat/message-template", 'wechat/message-template/detail');
			$stateProvider.state('wechat.messageTemplate', {
				url: '/message-template',
				templateUrl: globals.basAppRoute + 'message-template/partials/message-template.html',
				controller: 'messageTemplateCtrl'
			}).state('wechat.messageTemplate.detail', {
				url: '/detail',
				templateUrl: globals.basAppRoute + 'message-template/partials/message-template-detail.html',
				controller: 'messageTemplateDetailCtrl'
			}).state('wechat.messageTemplate.list', {
				url: '/list',
				templateUrl: globals.basAppRoute + 'message-template/partials/message-template-list.html',
				controller: 'messageTemplateListCtrl'
			});
		}]);
}(angular));
(function (angular) {
	"use strict";
	angular.module('messageTemplate').factory('messageTemplateSvc', ['$http', 'basDataSvc', 'platformModalSvc', 'nswGlobals', '$q',
		function ($http, basDataSvc, platformModalSvc, nswGlobals, $q) {
			var options = {
				requireAppId: true,
				uri: 'templateMsg/template',
				item: {
					default: {
						job: false
					},
					afterCreated: function (item) {
						item.appId = nswGlobals.getValue('appId');
					},
					prepareRemove: function (service, options) {
						options.params.appId = nswGlobals.getValue('appId');
						options.params.ids = options.params.id;
					}
				},
				list: {
					listUri: 'templateMsg/list',
					enablePaging: true,
					enableSearch: true,
					pageSize: 10,
					selectionMode: 'multi',
					prepareMultiRemove: function (service, options) {
						service.omitAttr(options, 'appId');
					}
				}
			};
			var service = basDataSvc.createInstance(options);

			service.toggleStatus = function toggleStatus(item) {
				item.status = !item.status;
				service.updateItem(item, {
					loadingTip: '状态更新中...',
					displayTip: false,
					showLoading: true
				}).then(function () {
					platformModalSvc.showSuccessTip('状态更新成功!');
				}, function (err) {
					platformModalSvc.showWarmingMessage(err, '操作失败');
				});
			};

			service.cancelJob = function cancelJob(id){
				var defer = $q.defer();
				var options = {
					method: 'post',
					url: globals.basAppRoot + 'templateMsg/cancleJob',
					params: {
						id: id
					}
				};
				$http(options).then(function (res) {
					if (res.data.isSuccess) {
						defer.resolve(res.data.data);
						service.loadData();
						platformModalSvc.showSuccessTip(res.data.data);
					} else {
						platformModalSvc.showWarmingMessage(res.data.data, '操作失败');
					}
				});
				return defer.promise;
			};

			service.getAllTemplate = function getAllTemplate() {
				var defer = $q.defer();
				var options = {
					method: 'get',
					url: globals.basAppRoot + 'templateMsg/getAllTemplate',
					params: {
						appId: nswGlobals.getValue('appId')
					}
				};
				$http(options).then(function (res) {
					if (res.data.isSuccess) {
						defer.resolve(res.data.data);
					} else {
						defer.reject(res.data.data);
					}
				});
				return defer.promise;
			};

			service.transformKeywords = function transformKeywords(template, keywords) {
				keywords = keywords || {};
				return template.replace(/(\{\{[^\}]+\}\})/ig, function (src, keyword) {
					keyword = keyword || '';
					keyword = keyword.replace(/\{|\}*/ig, '').split('.')[0];
					return keywords[keyword] || '';
				});
			};

			service.resolveTemplateKeys = function resolveTemplateKeys(template) {
				var matchedKeys = template.match(/\{\{[^\}]+\}\}/ig);
				var keywords = [];
				_.forEach(matchedKeys, function (row) {
					var word = row.replace(/\{|\}*/ig, '');
					if (_.find(keywords, {title: word})) {
						return;
					}

					var keyword = {
						title: word,
						keyValue: word.split('.')[0]
					};
					keywords.push(keyword);
				});
				return keywords;
			};
			return service;
		}]);

}(angular));
/**
 * Created by yaoyc on 2016/5/25.
 */
(function (angular) {
	"use strict";
	angular.module("messageTemplate").controller("messageTemplateCtrl", ['$scope', '$state', 'messageTemplateSvc',
		function ($scope, $state, messageTemplateSvc) {
			$scope.tabs = {};
			$scope.tabTitle = '新建二维码';
			$scope.tabInfo = 0;
			var _route = '', _key = 1;
			$scope.selectTab = function selectTab(key, route) {
				_route = route;
				_key = key;

				if (key === 1) {
					$scope.tabInfo++;
					_.forEach($scope.tabs, function (tab, prop) {
						$scope.tabs[prop] = false;
					});
					$scope.tabs[key] = true;
					$scope.tab = key;
					if (route) {
						$state.go('wechat.messageTemplate.' + route);
					}
					//if ($scope.tabInfo > 2) {
					//	messageTemplateSvc.createNew();
					//}
				} else if (key === 2) {
					$scope.$broadcast('checkFormDirty');
				}
			};

			$scope.$on('formDirtyInfo', function (e, options) {
				if (!options.stop || options.dirty === false) {
					$scope.tabInfo++;
					_.forEach($scope.tabs, function (tab, prop) {
						$scope.tabs[prop] = false;
					});
					$scope.tabs[_key] = true;
					$scope.tab = _key;
					if (_route) {
						$state.go('wechat.messageTemplate.' + _route);
					}
					messageTemplateSvc.createNew();
				} else {
					$scope.tabs[1] = true;
					$scope.tab = 1;
				}
			});

			$scope.goToList = function goToList() {
				$scope.selectTab(2, 'list');
			};

			$scope.goToDetail = function goToDetail() {
				$scope.tabInfo = 0;
				$scope.selectTab(1, 'detail');
			};

			var currentItemChanged = function currentItemChanged(item) {
				$scope.tabTitle = item.id ? '编辑模板消息' : '新建模板消息';
			};

			messageTemplateSvc.registerCurrentItemChanged(currentItemChanged);

			$scope.$on('$destroy', function () {
				messageTemplateSvc.unregisterCurrentItemChanged(currentItemChanged);
			});

		}]);
}(angular));
/*global angular*/
(function (angular) {
	"use strict";
	angular.module("messageTemplate").controller("messageTemplateDetailCtrl", ['$scope', 'nswGlobals', 'messageTemplateSvc', 'basDetailCtrlSvc', 'memberCtgDataSvc',
		function ($scope, nswGlobals, messageTemplateSvc, basDetailCtrlSvc, memberCtgDataSvc) {
			basDetailCtrlSvc.createInstance($scope, messageTemplateSvc, {
				tip: {
					loading: {
						message: '消息发送中...!'
					}
				},
				notCopyCurrent: true,
				listState: 'wechat.messageTemplate.list'
			});
			$scope.groupTypes = [{id: -100, name: '全部用户'}, {id: -99, name: '按粉丝标签选择'}];
			$scope.options.preview = false;
			var init = function init() {
				if (!$scope.currentItem) {
					$scope.create();
				} else if ($scope.currentItem.appId !== nswGlobals.getValue('appId')) {
					$scope.create();
				} else {
					if ($scope.currentItem.content) {
						$scope.options.para = messageTemplateSvc.resolveTemplateKeys($scope.currentItem.content);
					}
					if($scope.currentItem.groupId) {
						$scope.currentItem.groupId = parseInt($scope.currentItem.groupId);
					}
				}
				$scope.options.groupType = ($scope.currentItem.groupId !== -99) ? -100 : -99;
				$scope.options.showPreview = false;
				messageTemplateSvc.getAllTemplate().then(function (data) {
					$scope.options.allTemplate = data;
				});
			};
			$scope.changeTemplateId = function (template) {
				$scope.options.groupType = ($scope.currentItem.groupId !== -99) ? -100 : -99;
				$scope.currentItem.content = template.content;
				$scope.currentItem.templateId = template.template_id;
				if ($scope.currentItem.content) {
					$scope.options.para = messageTemplateSvc.resolveTemplateKeys($scope.currentItem.content);
				}
			};
			$scope.isUrlChanged = function isUrlChanged() {
				//为空时后端会默认加了个#
				if (!$scope.currentItem.url || $scope.currentItem.url === '#') {
					$scope.currentItem.url = 'http://';
				}
			};
			$scope.getTime = function getTime() {
				$scope.currentItem.sendTime = new Date().format('yyyy-MM-dd hh:mm:ss');
			};
			$scope.groupTypeSelected = function groupTypeSelected(value) {
				if (value === -99 && !$scope.memberCatalogs.length) {
					memberCtgDataSvc.loadData();
				}else{
					$scope.currentItem.groupId = null;
				}

			};
			var memberCatalogLoaded = function memberCatalogLoaded(catalogs) {
				$scope.memberCatalogs = _.filter(catalogs, function (ctg) {
					return !!ctg.count && ctg.id !== 10000;
				});
			};
			$scope.reset = function reset(form){
				if($scope.currentItem.$$new){
					$scope.create();
					$scope.options.para = {};
					form.$setPristine();
				}else{
					$scope.goList();
				}

			};
			$scope.saveItem = function saveItem(form, saveOptions) {
				if(!$scope.currentItem.job){
					$scope.omitAttr($scope.currentItem,'sendTime');
				}
				if(!$scope.currentItem.groupId){
					$scope.currentItem.groupId = -100;
				}
				form.$setPristine();
				$scope.save(true, form, $scope.currentItem.title);
				$scope.goToList();
			};
			$scope.togglePreview = function togglePreview() {
				$scope.options.showPreview = !$scope.options.showPreview;
				if ($scope.options.showPreview) {
					$scope.options.previewConent = messageTemplateSvc.transformKeywords($scope.currentItem.content, $scope.currentItem.para);
				}
			};

			$scope.updatePreview = function updatePreview() {
				if ($scope.options.showPreview) {
					$scope.options.previewConent = messageTemplateSvc.transformKeywords($scope.currentItem.content, $scope.currentItem.para);
				}
			};
			$scope.hasTime = function hasTime(str){
				return !str.search('time');
			};
			memberCtgDataSvc.registerListLoaded(memberCatalogLoaded);

			init();
			$scope.$on('$destroy', function () {
				memberCtgDataSvc.unregisterListLoaded(memberCatalogLoaded);
			});
		}]);
}(angular));
/*global angular*/
(function (angular) {
	"use strict";
	angular.module("messageTemplate").controller("messageTemplateListCtrl", ['$scope', 'messageTemplateSvc', 'basListCtrlSvc', 'platformModalSvc', '$state', 'platformMenuDataSvc',
		function ($scope, messageTemplateSvc, basListCtrlSvc, platformModalSvc, $state, platformMenuDataSvc) {
			basListCtrlSvc.createInstance($scope, messageTemplateSvc, {
				detailState: 'wechat.messageTemplate.detail'
			});
			//var searchOptions = angular.copy($scope.searchOptions);
			$scope.searchData();
			$scope.editItem = function editItem(item) {
				$scope.edit(item);
				$scope.goToDetail();
			};

			$scope.toggleStatus = function toggleStatus(item) {
				messageTemplateSvc.toggleStatus(item);
			};

			$scope.cancelJob = function cancelJob(id) {
				messageTemplateSvc.cancelJob(id);
			};

			$scope.removeItems = function removeItems() {
				platformModalSvc.showConfirmMessage('确定要批量删除模板消息吗？', '温馨提示').then(function () {
					messageTemplateSvc.removeItems(messageTemplateSvc.getSelectedItems());
				});
			};
			$scope.$on("$destroy",function(){
				if($state.current&&$state.current.url === '/message-template'){
					$scope.goToDetail();
				}
			});
		}]);
}(angular));
/**
 * Created by yaoyc on 2017/5/2.
 */
(function (angular) {
	"use strict";
	angular.module('log', ['platform'])
		.config(['$stateProvider', '$urlRouterProvider',
			function ($stateProvider) {
				$stateProvider
					.state('wechat.log', {
						url:'/log-list',
						templateUrl:globals.basAppRoute+'log/partials/log-list.html',
						controller:'logListCtrl'
					});
			}]);
})(angular);

/**
 * Created by yaoyc on 2017/5/2.
 */
(function (angular) {
	"use strict";
	angular.module('log').factory('logSvc', ['basDataSvc', 'platformModalSvc',
		function (basDataSvc,platformModalSvc) {
			var options = {
				requireAppId:true,
				uri:'',
				item:{
					default:{}
				},
				list:{
					method:'get',
					listUri:'log/list',
					enablePaging:true,
					pageSize:10,
					enableSearch:true,
					selectionMode: 'single'
				}
			};

			var service = basDataSvc.createInstance(options);
			return service;
		}]);
})(angular);
/**
 * Created by yaoyc on 2017/5/2.
 */
(function (angular) {
	"use strict";
	angular.module('log').controller('logListCtrl', ['$scope', 'basListCtrlSvc', 'platformModalSvc', 'logSvc','platformDateSvc',
		function ($scope, basListCtrlSvc, platformModalSvc, logSvc,platformDateSvc) {
			basListCtrlSvc.createInstance($scope, logSvc, {
				detailState:'wechat.log.detail'
			});
			$scope.range = {
				start:platformDateSvc.dateRange({range:3})
			};
			$scope.searchOptions.start = $scope.range.start||'';
			$scope.getNewList = function getNewList(data){
				if(!data){
					return;
				}
				$scope.searchOptions.start = data.start;
				$scope.searchOptions.end = data.end;
			};
			$scope.searchData();


		}]);
})(angular);
/*global angular*/
(function(angular){
	"use strict";
	angular.module('course',['platform']).config(['$stateProvider',function ($stateProvider){
		$stateProvider.state('wechat.course', {
			url: '/course',
			templateUrl:  globals.basAppRoute+'course/partials/course.html',
			controller: 'courseCtrl'
		}).state('wechat.course.courseList', {
			url: '/list',
			templateUrl:  globals.basAppRoute+'course/partials/course-list.html',
			controller: 'courseListCtrl'
		}).state('wechat.course.courseDetail', {
			url: '/detail/:id',
			templateUrl:  globals.basAppRoute+'course/partials/course-detail.html',
			controller: 'courseDetailCtrl'
		}).state('wechat.course.create', {
			url: '/detail',
			templateUrl:  globals.basAppRoute+'course/partials/course-detail.html',
			controller: 'courseDetailCtrl'
		});
	}]);
}(angular));
(function (angular) {
	"use strict";
	
	angular.module('course').factory('courseDataSvc', ['basDataSvc', 'nswGlobals', 'platformDateSvc', function (basDataSvc, nswGlobals, platformDateSvc) {
		
		var options = {
			name: 'activeSvc',
			uri: 'active',
			requireAppId: true,
			item: {
				default: {
					originalPrice: 0.00,
					price: 0.00
				},
				afterCreated: function (item) {
					item.appId = nswGlobals.getValue('appId');
					item.activeStartTime = platformDateSvc.formateDate(new Date(), 'YYYY-MM-DD hh:mm');
					
					var finishTime = new Date();
					finishTime.setHours(finishTime.getHours()+1);
					item.finishTime = platformDateSvc.formateDate(finishTime, 'YYYY-MM-DD hh:mm');
				}
			},
			list: {
				listUri: '/active/list',
				listMethod: 'get',
				enablePaging: true,
				enableSearch: true,
				selectionMode: 'single',
				pageSize: 10
			}
		};
		var service = basDataSvc.createInstance(options);
		return service;
	}]);
}(angular));
(function (angular) {
	"use strict";
	
	angular.module('course').controller('courseCtrl', ['$scope', function ($scope) {
	
	}]);
}(angular));
(function (angular) {
	"use strict";
	
	angular.module('course').controller('courseDetailCtrl', ['$scope', 'basDetailCtrlSvc', 'courseDataSvc',
		function ($scope, basDetailCtrlSvc, courseDataSvc) {
			
			basDetailCtrlSvc.createInstance($scope, courseDataSvc, {
				notCopyCurrent: true,
				listState: 'wechat.course.courseList',
				tabs: {
					baseInfo: {title: '基本信息'}
				}
			});
			
			
			if ($scope.params.id) {
				$scope.setCurrentItem($scope.params.id);
			} else if ($scope.currentItem.id) {
				$scope.setCurrentItem($scope.params.id);
			} else{
				$scope.create();
			}
			
		}]);
}(angular));
(function (angular) {
	"use strict";
	
	angular.module('course').controller('courseListCtrl', ['$scope', 'basListCtrlSvc', 'courseDataSvc',
		function ($scope, basListCtrlSvc, courseDataSvc) {
			basListCtrlSvc.createInstance($scope, courseDataSvc, {
				detailState: 'wechat.course.courseDetail'
			});
			
			$scope.searchData();
			
			$scope.edit = function edit(item) {
				courseDataSvc.setCurrentItem(item);
				$scope.goState($scope.detailState, {params: {id: item.id}});
			};
		}]);
}(angular));
/*global angular*/
(function(angular){
	"use strict";
	angular.module('coursereg',['platform']).config(['$stateProvider',function ($stateProvider){
		$stateProvider.state('wechat.coursereg', {
			url: '/coursereg',
			templateUrl:  globals.basAppRoute+'course-reg/partials/course-reg.html',
			controller: 'courseRegCtrl'
		}).state('wechat.coursereg.list', {
			url: '/list',
			templateUrl:  globals.basAppRoute+'course-reg/partials/course-reg-list.html',
			controller: 'courseRegListCtrl'
		}).state('wechat.coursereg.detail', {
			url: '/detail/:id',
			templateUrl:  globals.basAppRoute+'course-reg/partials/course-reg-detail.html',
			controller: 'courseRegDetailCtrl'
		});
	}]);
}(angular));
(function (angular) {
	"use strict";
	
	angular.module('coursereg').factory('courseRegDataSvc', ['basDataSvc', '$http', 'nswGlobals', function (basDataSvc, $http, nswGlobals) {
		
		var options = {
			name: 'courseRegSvc',
			uri: 'activeMember',
			requireAppId: true,
			item: {
				default: {},
				loadUri:'getActiveMember'
			},
			list: {
				listUri: 'activeMember/list',
				listMethod: 'get',
				enablePaging: true,
				enableSearch: true,
				selectionMode: 'single',
				pageSize: 20
			}
		};
		var service = basDataSvc.createInstance(options);
		
		
		service.searchCourseHistory = function searchCourseHistory(searchOptions) {
			return $http(
				{
					method: 'get',
					url: globals.basAppRoot + 'activeMember/activeHistory',
					params: searchOptions
				}
			).then(function (res) {
				return res.data.data;
			});
		};
		
		return service;
	}]);
}(angular));
(function (angular) {
	"use strict";
	
	angular.module('coursereg').controller('courseRegCtrl', ['$scope', function ($scope) {
	
	}]);
}(angular));
(function (angular) {
	"use strict";
	
	angular.module('coursereg').controller('courseRegDetailCtrl', ['$scope', 'NgTableParams', 'basDetailCtrlSvc', 'courseRegDataSvc',
		function ($scope, NgTableParams, basDetailCtrlSvc, dataSvc) {
			basDetailCtrlSvc.createInstance($scope, dataSvc, {
				notCopyCurrent: true,
				listState: 'wechat.coursereg.list',
				tabs: {
					baseInfo: {title: '基本信息'},
					courseHistory: {title: '课程记录'}
				}
			});
			
			
			if ($scope.params.id) {
				$scope.setCurrentItem($scope.params.id);
			} else if ($scope.currentItem.id) {
				$scope.setCurrentItem($scope.params.id);
			}
			
			$scope.showCourse = function showCourse(course) {
				$scope.goState('wechat.course.courseDetail',{params:{id:course.id}});
			};
			
			var oldId = '';
			$scope.historySearchOptions = {
				totalRows: 0,
				pageNum: 1, //currentPage
				totalPages: 0,
				pageSize: 20,
				maxSize: 5
			};
			
			$scope.tableParams = new NgTableParams({}, {
				counts: [],
				dataset: []
			});
			
			function searchHistoryData() {
				$scope.historySearchOptions.openid = $scope.currentItem.openid;
				$scope.historySearchOptions.appId = $scope.currentItem.appId;
				$scope.historySearchOptions.pageNum = 1;
				$scope.historySearchOptions.totalPages = 1;
				
				dataSvc.searchCourseHistory($scope.historySearchOptions).then(function (res) {
					$scope.dataList = res.listData;
					$scope.historySearchOptions.totalPages = res.pageCount;
					$scope.historySearchOptions.totalRows = res.totalCount;
					
					$scope.tableParams.count($scope.dataList.length);
					$scope.tableParams.settings({dataset: $scope.dataList});
				});
			}
			
			function currentItemChanged() {
				if ($scope.currentItem.id === oldId) {
					return;
				}
				oldId = $scope.currentItem.id;
				searchHistoryData();
			}
			
			dataSvc.registerCurrentItemChanged(currentItemChanged);
			
			$scope.$on('$destroy', function () {
				dataSvc.unregisterCurrentItemChanged(currentItemChanged);
			});
		}]);
}(angular));
(function (angular) {
	"use strict";
	
	angular.module('coursereg').controller('courseRegListCtrl', ['$scope', 'basListCtrlSvc', 'courseRegDataSvc',
		function ($scope, basListCtrlSvc, dataSvc) {
			basListCtrlSvc.createInstance($scope, dataSvc, {
				detailState:'wechat.coursereg.detail'
			});
			
			
			$scope.searchData();
			$scope.edit = function edit(item) {
				dataSvc.setCurrentItem(item);
				$scope.goState($scope.detailState, {params: {id: item.id}});
			};
		}]);
}(angular));