/*global angular*/
(function(angular){
    "use strict";
	angular.module('account',['platform']).config(['$stateProvider', '$urlRouterProvider',function ($stateProvider, $urlRouterProvider){
		$urlRouterProvider.when("/wechat",'/wechat/account');
		$stateProvider.state('wechat.account', {
			url: '/account',
			templateUrl:  globals.basAppRoute+'account/partials/account-list.html',
			controller: 'accountListController'
		}).state('wechat.accountNotice',{
			url:'/account/notice',
			templateUrl:  globals.basAppRoute+'account/partials/notice-list.html',
			controller:'noticeListCtrl'
		}).state('wechat.accountAuthorize',{
			url:'/account/authorize',
			templateUrl:  globals.basAppRoute+'account/partials/account-authorize.html',
			controller:'accountListController'
		}).state('wechat.accountAdd',{
				url:'/account/add',
				templateUrl:  globals.basAppRoute+'account/partials/account-edit.html',
				controller:'accountEditCtrl'
		}).state('wechat.accountEdit',{
			url:'/account/edit',
			templateUrl:  globals.basAppRoute+'account/partials/account-edit.html',
			controller:'accountEditCtrl'
		}).state('wechat.authorizeAbout',{
			url:'/account/authorizeAbout?state&id',
			templateUrl:  globals.basAppRoute+'account/partials/account-authorize-about.html',
			controller:'accountAuthorizeCtrl'
		}).state('wechat.authorizeUrl',{
			url:'/account/authorizeUrl?appId',
			templateUrl:  globals.basAppRoute+'account/partials/account-authorize-url.html',
			controller:'accountAuthorizeUrlCtrl'
		}).state('wechat.authorizeMain',{
			url:'/account/authorizeMain',
			templateUrl:  globals.basAppRoute+'account/partials/account-authorize-base.html',
			controller:'accountBaseCtrl'
		}).state('wechat.authorizeMain.explain',{
			url:'/explain',
			templateUrl:  globals.basAppRoute+'account/partials/account-authorize-explain.html',
			controller:'accountListController'
		}).state('wechat.authorizeMain.mode',{
			url:'/mode',
			templateUrl:  globals.basAppRoute+'account/partials/account-authorize-mode.html',
			controller:'accountEditCtrl'
		}).state('wechat.authorizeMain.success',{
			url:'/success?state&id',
			templateUrl:  globals.basAppRoute+'account/partials/account-authorize-success.html',
			controller:'accountAuthorizeCtrl'
		}).state('wechat.authorizeMain.write',{
			url:'/write?appId',
			templateUrl:  globals.basAppRoute+'account/partials/account-authorize-write-info.html',
			controller:'accountAuthorizeUrlCtrl'
		});
	}]);
}(angular));
(function (angular) {
	"use strict";
	angular.module('account').factory('accountDataSvc', ['basDataSvc', 'nswGlobals', '$http', 'platformModalSvc', '$q', 'platformMenuDataSvc', '$state',
		function (basDataSvc, nswGlobals, $http, platformModalSvc, $q, platformMenuDataSvc, $state) {
			var options = {
				requireAppId: false,
				uri: 'account/wxAccountInfo',
				item: {
					default: {
						bindType: 0,
						verify_type_info: -1,
						encryptType: false
					}
				},
				list: {
					enableSearch: true,
					listUri: 'account/getWxAccountList',
					selectionMode: 'single'
				}
			}, eidtHistory = {}, flog = true;
			var service = basDataSvc.createInstance(options);
			
			
			service.registerCurrentItemChanged(function (currentItem) {
				nswGlobals.setValue('accountId', currentItem.id, true);
				nswGlobals.setValue('appId', currentItem.appId, true);
				nswGlobals.setValue('platform_menus_defaultState', {stop: true}, true);
				platformMenuDataSvc.reloadSystemMenus();
			});
			
			service.clearCache = function clearCache() {
				nswGlobals.setValue('accountId', null, true);
				nswGlobals.setValue('appId', null, true);
			};
			var listLoaded = function (accounts) {
				var accountId = nswGlobals.getValue('accountId');
				if (!accountId && $state.current.name !== 'wechat.authorizeMain.explain') {
					$state.go("wechat.account");
					return;
				}
				if (accounts.length) {
					service.setCurrentItem(_.find(accounts, {id: accountId}));
				} /*else if (flog) {
					setTimeout(function () {
						service.loadData();
					}, 500);
					flog = false;
				}*/
				
			};
			service.registerListLoaded(listLoaded);
			
			service.authorizeAotu = function authorizeAotu() {
				var defer = $q.defer();
				var options = {
					method: 'get',
					url: globals.basAppRoot + 'oauth/authorCheck'
				};
				$http(options).then(function (res) {
					if (res.data.isSuccess) {
						defer.resolve(res.data);
					} else {
						platformModalSvc.showWarmingMessage(res.data.data, '温馨提示');
					}
				});
				return defer.promise;
			};
			service.getEidtHistory = function getEidtHistory() {
				return eidtHistory.back || '欢迎页面';
			};
			service.setEidtHistory = function setEidtHistory(history) {
				eidtHistory.back = eidtHistory.current || '';
				eidtHistory.current = history;
			};
			
			return service;
		}]);
	
}(angular));
/**
 * Created by yaoyc on 2016/5/12.
 */
/*global angular*/
(function(angular){
	"use strict";
	angular.module('account').factory('noticeDataSvc',[function(){

	}]);
}(angular));
/*global angular*/
(function (angular) {
	"use strict";
	angular.module("account").controller("accountListController", ['$scope', 'basListCtrlSvc', 'accountDataSvc', 'platformModalSvc', '$state', 'nswGlobals', 'platformMenuDataSvc','$location','$sessionStorage',
		function ($scope, basListCtrlSvc, accountDataSvc, platformModalSvc, $state, nswGlobals, platformMenuDataSvc,$location,$sessionStorage) {
			//默认选中 我已满足以上条件
			$scope.isAgree = true;
			//定义选中的授权方式   ture 为自动  false 为普通  默认为自动
			$scope.isAutoAuthorize = true;


			basListCtrlSvc.createInstance($scope, accountDataSvc, {
				detailState: 'wechat.authorizeMain.mode'
			});
			$scope.addAccount = function addAccount() {
				accountDataSvc.authorizeAotu().then(function (data) {
					if (data.isSuccess) {
						$state.go("wechat.authorizeMain.explain");
					}
				});

			};
			$scope.changeChooes = function changeChooes(bl) {
				$scope.isAutoAuthorize = bl;
			};
			$scope.removeItem = function removeItem(account) {
				account.deleteing = true;
				platformModalSvc.showConfirmMessage('你确定要删除<font class="promise-color">已选择的</font>账号吗?', '温馨提示', '<div>删除之后所有与此账号相关的信息，如已录入的回复信息、自定义菜单等都将删除无法还原</div>').then(function () {
					$scope.remove(account,null,account.nick_name);
				},function(){
					account.deleteing = false;
				});
			};
			$scope.setCurrentItem = function setCurrentItem(item) {
				accountDataSvc.setCurrentItem(item);
				if(item.appId) {
					platformMenuDataSvc.selectMenu('关注时回复');
				}
			};
			var selectedProject = $location.$$search.projId? {id: $location.$$search.projId} : $sessionStorage.selectedProject;
			if(selectedProject){
				$scope.searchData();
			}
			$scope.setCurrentItem({});
		}]);
}(angular));
/*global angular*/
(function (angular) {
	"use strict";
	angular.module("account").controller("accountAuthorizeCtrl", ['$scope','$stateParams','$state', 'basDetailCtrlSvc', 'accountDataSvc','platformModalSvc','nswGlobals','platformMenuDataSvc',
		function ($scope,$stateParams,$state, basDetailCtrlSvc, accountDataSvc,platformModalSvc,nswGlobals,platformMenuDataSvc) {
			basDetailCtrlSvc.createInstance($scope, accountDataSvc,{});
			if($stateParams.state==='success'){
				accountDataSvc.loadItemById($stateParams.id).then(function(item){
					//accountDataSvc.setCurrentItem(item);
					$scope.currentItem = item;
					$scope.isCertifi = $scope.currentItem.bindType===2 && $scope.currentItem.verify_type_info===0;
					$scope.accountType = $scope.currentItem.verify_type_info+''+$scope.currentItem.bindType;
					platformMenuDataSvc.reloadSystemMenus();
				});
			}else {
				platformModalSvc.showWarmingMessage('授权失败,请确认是否绑定的微信号已到上限,或咨询客服解决!','温馨提示').then(function(){
					$state.go('wechat.account');
				});
			}





			//$scope.reAuthorize = function reAuthorize(){
			//	$state.go('wechat.accountAuthorize');
			//};
			$scope.reAuthorize = function reAuthorize(){
				nswGlobals.setValue('platform_menus_defaultState', {stop: true}, true);
				nswGlobals.setValue('platform_menus_selectedMenu', null, true);
				nswGlobals.setValue('platform_menus_selectedMenuGroup', null, true);
				//$scope.$broadcast('app.exit');
				window.location.href = globals.basAppRoot + 'oauth/goAuthor';
			};
			$scope.goList = function goList(){
				$state.go('wechat.account');
			};

		}]);
}(angular));
/*global angular*/
(function (angular) {
	"use strict";
	angular.module("account").controller("accountBaseCtrl", ['$scope', '$stateParams', '$state', 'basDetailCtrlSvc', 'accountDataSvc', 'nswGlobals',
		function ($scope, $stateParams, $state, basDetailCtrlSvc, accountDataSvc, nswGlobals) {
			$scope.getStage = function getStage(){
				if($state.current.name ==='wechat.authorizeMain.explain'){
					return 1;
				}else if($state.current.name ==='wechat.authorizeMain.success'){
					return 3;
				}else{
					return 2;
				}
			};
		}]);
}(angular));

/*global angular*/
(function (angular) {
	"use strict";
	angular.module("account").controller("accountEditCtrl", ['$scope', '$stateParams', '$state', 'basDetailCtrlSvc', 'accountDataSvc', 'nswGlobals','platformMenuDataSvc','$sessionStorage',
		function ($scope, $stateParams, $state, basDetailCtrlSvc, accountDataSvc, nswGlobals,platformMenuDataSvc,$sessionStorage) {
			basDetailCtrlSvc.createInstance($scope, accountDataSvc, {});
			$scope.isEdit = false;
			$scope.isWrite = true;

			//当前菜单为空时返回到列表界面
			//处理浏览器回退或者刷新时的异常
			if(!platformMenuDataSvc.getMenus().groups.length){
				$scope.goState('wechat.authorizeMain.explain');
			}

			var initSave = $scope.save;
			$scope.save = function save() {
				$scope.currentItem.head_img = $scope.currentItem.head_img || globals.defaultImg;
				$scope.currentItem.$new = !$scope.currentItem.type;
				$scope.isEdit = !$scope.currentItem.$new;

				initSave(false, $scope.formaccount,$scope.currentItem.title).then(function (res) {
					if (!$scope.isEdit && res.appId) {
						$state.go('wechat.authorizeMain.write',{'appId': res.id});
					}else{
						platformMenuDataSvc.selectMenu(accountDataSvc.getEidtHistory());
					}
					accountDataSvc.loadData();
				});
			};
			$scope.cancleBtn = function cancleBtn(){
				window.history.back(-1);
			};
			$scope.imgurl = 'file/local/upload';
			if ($scope.currentItem.type) {
				$scope.isEdit = true;
			}
			$scope.accountType = [{
				_id: 0,
				name: '订阅号'
			}, {
				_id: 2,
				name: '服务号'
			}];

			if (!$scope.currentItem) {
				accountDataSvc.create();
			}
			$scope.changeFile = function changeFile(file) {
				$scope.currentItem.head_img = file.fileId;
			};
			$scope.reAuthorize = function reAuthorize(){
				nswGlobals.setValue('platform_menus_defaultState', {stop: true}, true);
				nswGlobals.setValue('accountId', null, true);
				nswGlobals.setValue('appId', null, true);
				nswGlobals.setValue('platform_menus_selectedMenu', null, true);
				nswGlobals.setValue('platform_menus_selectedMenuGroup', null, true);
				//$scope.$broadcast('app.exit');
				window.location.href = globals.basAppRoot + 'oauth/goAuthor?projectId='+$sessionStorage.selectedProject.id;
			};
			$scope.chooesAuthorizeWay = function chooesAuthorizeWay(tab) {
				if (tab===1) {
					accountDataSvc.authorizeAotu().then(function () {
						nswGlobals.setValue('platform_menus_defaultState', {stop: true}, true);
						nswGlobals.setValue('accountId', null, true);
						nswGlobals.setValue('appId', null, true);
						nswGlobals.setValue('platform_menus_selectedMenu', null, true);
						nswGlobals.setValue('platform_menus_selectedMenuGroup', null, true);
						window.location.href = globals.basAppRoot + 'oauth/goAuthor?projId='+$sessionStorage.selectedProject.id;
					});
				} else {
					$scope.isWrite = false;
				}
			};
			$scope.saveAirticle = function saveAirticle() {
					$state.go('wechat.account');
			};
		}]);
}(angular));

/*global angular*/
(function (angular) {
	"use strict";
	angular.module("account").controller("accountAuthorizeUrlCtrl", ['$scope', '$stateParams', '$state', 'basDetailCtrlSvc', 'accountDataSvc',
		function ($scope, $stateParams, $state, basDetailCtrlSvc, accountDataSvc) {
			accountDataSvc.loadItemById($stateParams.appId).then(function(item){
				//accountDataSvc.setCurrentItem(item);
				$scope.currentItem = item;
				$scope.currentItem.appId = '';
				$scope.isCertifi = $scope.currentItem.bindType===2 && $scope.currentItem.verify_type_info===0;
				$scope.accountType = $scope.currentItem.verify_type_info+''+$scope.currentItem.bindType;
			});



			$scope.saveAirticle = function saveAirticle() {
				//var html = '<label>验证结果:</label><p>1.重新关注绑定的微信号<br>2.关注时收到"绑定成功,欢迎您!",即表明您已绑定成功,未收到信息,则绑定失败<br>3.<a href="https://mp.weixin.qq.com/advanced/advanced?action=dev&t=advanced/dev&">去验证</a></p>';
				//platformModalSvc.showSuccessMessage('添加成功，请验证结果！', '温馨提示', html).then(function () {
				$state.go('wechat.authorizeMain.success',{'id': $stateParams.appId,'state':'success'});
				//});
			};
			//accountDataSvc.registerItemCreated = function registerItemCreated(function(){
			//
			//});
		}]);
}(angular));

/*global angular*/
(function(angular){
    "use strict";
	angular.module("account").controller("noticeListCtrl",['$scope','noticeDataSvc',function($scope,noticeDataSvc){

	}]);
}(angular));
/*global angular*/
(function(angular){
    "use strict";
	angular.module('materials',['platform']).config(['$stateProvider', function ($stateProvider){
		$stateProvider.state('wechat.materials', {
			url: '/materials/detail',
			templateUrl:  globals.basAppRoute+'materials/partials/materials-detail.html',
			controller: 'materialsDetailCtrl'
		}).state('wechat.materials.add', {
			url: '/add',
			templateUrl:  globals.basAppRoute+'materials/partials/materials-detail-add.html',
			controller: 'materialsDetailAddCtrl'
		}).state('wechat.materials.apply', {
			url: '/apply',
			templateUrl:  globals.basAppRoute+'materials/partials/materials-detail-apply.html',
			controller: 'materialsDetailApplyCtrl'
		}).state('wechat.materialsList', {
			url: '/materialsList',
			templateUrl:  globals.basAppRoute+'materials/partials/materials-list.html',
			controller: 'materialsListCtrl'
		});

	}]);
}(angular));
(function (angular) {
	"use strict";
	angular.module('materials').factory('articleLibDataSvc', ['$q','$http','$state', '$timeout', 'basDataSvc', 'nswGlobals', 'materialsDataSvc','platformModalSvc',
		function ($q,$http,$state, $timeout, basDataSvc, nswGlobals, materialsDataSvc,platformModalSvc) {
			var options = {
				uri: 'material/materialInfoNews',
				list: {
					listUri: function () {
						return filterType === 'myMaterials' ? 'material/materialInfoNews' : 'wxMaterial/list';
					},
					pageSize: 2,
					enableSearch: true,
					enablePaging: true,
					prepareSearchParam: function (options) {
						options.type='news';
						options.appId = nswGlobals.getValue('appId');
					},
					selectionMode: 'single'
				}
			};
			var filterType = 'myMaterials';
			var service = basDataSvc.createInstance(options);

			var creatingMaterial = false;

			service.createArticle = function createArticle(type, srcModuleName) {
				materialsDataSvc.setCreateType(type, true, srcModuleName);
				creatingMaterial = true;
				materialsDataSvc.createNew();
				/*$state.go('wechat.materials.apply');*/
				if(materialsDataSvc.checkAuthed('phoneProj')) {
					$state.go('wechat.materials.apply');
				}else{
					$state.go('wechat.materials.add');
				}
			};

			var materialCreated = function materialCreated(material) {
				if (!creatingMaterial) {
					return;
				}
				creatingMaterial = false;

				$timeout(function () {
					service.closeModal(true, material);
				});
			};
			service.sync = function sync() {
				var defer = $q.defer();
				var option = {
					method: 'get',
					url: globals.basAppRoot + 'wxMaterial/sync',
					params:{
							appId : nswGlobals.getValue('appId'),
							type:'news'
					}

				};
				return $http(option).then(function (res) {
					if (res.data.isSuccess) {
						defer.resolve(res.data.data);
						platformModalSvc.showWarmingMessage(res.data.data, '温馨提示');
					} else {
						defer.reject(res.data.data);
						platformModalSvc.showWarmingMessage(res.data.data, '温馨提示');
					}
					return defer.promise;
				});
			};
			service.setFilterType = function setFilterType(type) {
				filterType = type;
			};

			materialsDataSvc.registerItemCreated(materialCreated);
			service.loadData();
			return service;
		}]);

}(angular));
(function (angular) {
	"use strict";
	angular.module('materials').factory('materialsCacheDataSvc', ['$timeout', '$state',
		function ($timeout, $state) {
			var service = {}, _materialSvc;

			var onCurrentItemChanged = function onCurrentItemChanged() {
				_materialSvc.saveCache();
			};

			service.init = function init(materialSvc) {
				_materialSvc = materialSvc;
				_materialSvc.registerCurrentItemChanged(onCurrentItemChanged);
			};

			//resolve cache to bas class, for save data to storage when page reloaded
			//liangcl 2016-06-27
			service.resolveCache = function resolveCache() {
				var svc = this;
				var currentItem = svc.getCurrentItem();
				return {
					current: {
						id: currentItem.id,
						name: currentItem.name
					},
					selectedIndex: svc.getArrowIndex(),
					createType: svc.getCreateType(),
					createSource: svc.getCreateSource(),
					searchoptions: svc.getSearchOptions()
				};
			};

			var doApplyCache = function doApplyCache(cache) {
				var svc = this,
					currentItem = svc.getCurrentItem(),
					isFromCache = false,
					searchOptions = cache.searchoptions || {};
				svc.setCreateType(cache.createType, cache.createSource);
				svc.setArrowIndex(cache.selectedIndex);
				if (!currentItem || !currentItem.id) {
					isFromCache = true;
					currentItem = cache.current || {};
				}
				if (searchOptions) {
					angular.extend(svc.getSearchOptions(), searchOptions);
				}
				if (currentItem.id) {
					currentItem.articles = [{}];
					svc.setCurrentItem(currentItem);
					svc.loadData().then(function (items) {
						currentItem = _.find(items, {id: currentItem.id});
						if (currentItem && currentItem.id) {
							svc.setCurrentItem(currentItem);

							if($state.current.name==='wechat.materials.apply') {
								$state.go('wechat.materials.add');
							}
						}
					});
				} else {
					svc.loadData();
				}
			};

			//load cache form storage and do init view
			//liangcl 2016-06-27
			service.applyCache = function applyCache(cache) {
				var self = this;
				$timeout(function () {
					doApplyCache.call(self, cache);
				});
			};


			return service;
		}]);
}(angular));
(function (angular) {
	"use strict";

	angular.module('materials').factory('materialsCmsDataSvc', ['$http', '$q','platformModalSvc','nswGlobals', function ($http, $q,platformModalSvc,nswGlobals) {
		var service = {}, projectId;

		var assembly = function assembly(data) {
			return data.map(function (item) {
				return {
					_id: item._id,
					name: item.name
				};
			});
		};

		/**
		 * 转换来自CMS的文章，主要是把图片路径转换成图库绝对路径
		 * @param article
		 */
		service.transformCmsArticle = function transformCmsArticle(article) {
			var src = /(src\S*=\S*")((?!http|https|ftp)\S+)"/ig;
			return article.replace(src, '$1' + globals.cmsImagePath + '$2"');
		};

		service.setProject = function setProject(data) {
			projectId = data;
		};

		service.getProject = function getProject() {
			return projectId;
		};

		service.getProjectLists = function getProjectLists() {
			var derfer = $q.defer();
			var option = {
				method: 'get',
				url: globals.basAppRoot + 'cms/getProjectLists'
			};
			$http(option).then(function (res) {
				if (res.data.isSuccess) {
					projectId = res.data.data;
					service.getModuleLists({projId: res.data.data}).then(function (moduleList) {
						derfer.resolve(moduleList);
					});
				} else {
					platformModalSvc.showWarmingMessage(res.data.data, '项目信息失败');
				}
				return res.data;
			});
			return derfer.promise;
		};
		service.getAllMBProject = function getAllMBProject(){
			var defer = $q.defer();
			var options = {
				method:'get',
				url:globals.basAppRoot+'cms/getAllMBProject',
				params:{
					appId:nswGlobals.getValue('appId')
				}
			};
			$http(options).then(function(res){
				if (res.data.isSuccess) {
					defer.resolve(res.data.data);
				} else {
					platformModalSvc.showWarmingMessage(res.data.data, '取模块列表失败');
				}
			});
			return defer.promise;
		}

		service.getModuleLists = function getModuleLists(params) {
			var derfer = $q.defer();
			var option = {
				method: 'get',
				url: globals.basAppRoot + 'cms/getModuleLists',
				params: params
			};
			$http(option).then(function (res) {
				if (res.data.isSuccess) {
					var modules = res.data.data.modules;
					derfer.resolve(assembly(modules));
				} else {
					platformModalSvc.showWarmingMessage(res.data.data, '取模块列表失败');
				}
				return res.data;
			});
			return derfer.promise;
		};

		service.getCtgLists = function getCtgLists(params) {
			var derfer = $q.defer();
			var option = {
				method: 'get',
				url: globals.basAppRoot + 'cms/getCtgLists',
				params: params
			};
			$http(option).then(function (res) {
				if (res.data.isSuccess) {
					derfer.resolve(assembly(res.data.data.ctgs));
				} else {
					platformModalSvc.showWarmingMessage(res.data.data, '分类列表失败');
				}
				return res.data;
			});
			return derfer.promise;
		};

		service.getArticleLists = function getArticleLists(data) {
			var params = data;
			var derfer = $q.defer();
			var option = {
				method: 'get',
				url: globals.basAppRoot + 'cms/getArticleLists',
				params: params
			};
			$http(option).then(function (res) {
				if (res.data.isSuccess) {
					derfer.resolve(res.data.data.articles);
				} else {
					platformModalSvc.showWarmingMessage(res.data.data, '项目信息失败');
				}
				return res.data;
			});
			return derfer.promise;
		};

		/*重构方法*/
		service.choseArticle = function choseArticle(item) {
			var article = {};
			article.title = item.title || '';
			if (!!item.imgSm && item.imgSm.url) {
				article.fileId = item.imgSm.url;
			} else {
				article.fileId = '';
			}
			article.digest = window.deletHtmlTag(item.desc) || '';
			article.digest = article.digest.replace(/(^\s*)/, '').replace(/\s*$/, '').replace(/\s{2,}/g, ' ');
			article.digest = article.digest.replace(/&nbsp;/g, ' ').substring(0, 120);
			if(item.content){
				article.content =  service.transformCmsArticle(item.content);
			}else if( item.tabContents&& item.tabContents instanceof Array){
				article.content = service.transformCmsArticle(item.tabContents[0].value);
			}else{
				article.content = '';
			}
			//article.content = service.transformCmsArticle(item.content || item.tabContents[0].value || '');
			article.id = item._id;
			return article;
		};

		return service;
	}]);

}(angular));

(function (angular) {
	"use strict";
	angular.module('materials').factory('materialsDataSvc', ['$state', 'basDataSvc', 'nswGlobals', '$http', 'platformModalSvc', '$q', 'materialsCacheDataSvc',
		function ($state, basDataSvc, nswGlobals, $http, platformModalSvc, $q, materialsCacheDataSvc) {
			var options = {
				name: 'materialsDataSvc',
				uri: 'material/materialInfoNews',
				item: {
					removeUri: 'material/materialInfo',
					loadUri: 'material/materialInfo',
					default: {
						articles: [{
							content: '',
							title: '',
							digest: '',
							show_cover_pic: '',
							isArticle: true
						}, {
							content: '',
							title: '',
							digest: '',
							show_cover_pic: '',
							isArticle: true
						}]
					},
					afterCreated: function (item) {
						item.appId = nswGlobals.getValue('appId');
						item.update_time = new Date().format("yyyy-MM-dd  hh:mm:ss");
					},
					prepareRemove: function (service, options) {
						options.params.type = 'news';
						options.params.appId = nswGlobals.getValue('appId');
					},
					prepareLoad: function (service, options) {
						options.params.type = 'news';
					},
					prepareUpdate: function (service, options) {
						_.omit(options.params, 'id');
					}
				},
				list: {
					enableSearch: true,
					enablePaging: true,
					pageSize: 12,
					prepareSearchParam: function (options) {
						options.appId = nswGlobals.getValue('appId');
					},
					selectionMode: 'single'
				},
				cache: {
					getCache: materialsCacheDataSvc.resolveCache,
					applyCache: materialsCacheDataSvc.applyCache
				}
			};

			var service = basDataSvc.createInstance(options);

			var createType, createSource, createSourceName, arrowIndex, _isDirty;

			service.setArrowIndex = function setArrowIndex(index) {
				arrowIndex = index;
			};
			service.getArrowIndex = function getArrowIndex() {
				return arrowIndex || 0;
			};

			service.getCreateType = function getCreateType() {
				return createType || nswGlobals.getValue('type');
			};

			/*service.loadItemById();*/
			service.getAppId = function getAppId() {
				return nswGlobals.getValue('appId');
			};

			service.isArticleEmpty = function isArticleEmpty(article) {
				article = article || {};
				return !(article.title || article.fileId || article.desc || article.content);
			};

			service.getCreateSource = function getCreateSource() {
				return createSource;
			};
			service.getCreateSourceName = function getCreateSourceName() {
				return createSourceName;
			};
			service.setCreateType = function setCreateType(type, source, sourceName) {
				var needGoBack = _.isBoolean(source) ? source : _.isString(source);
				if (needGoBack) {
					source = _.isString(source) ? source : $state.current.name;
					createSourceName = sourceName;
				}
				createType = type;
				createSource = source;

				nswGlobals.setValue('type', type, true);
			};

			service.registerItemCreated(function (material) {
				service.setCurrentItem(material);
			});

			service.registerItemLoaded(function (material) {
				service.setCurrentItem(material);
			});

			var completeUrl = function completeUrl(url) {
				if (url && !/^(http|ftp|https):\/\//.test(url)) {
					url = 'http://' + url;
				}
				return url;
			};

			service.createArticle = function createArticle(formPhone) {
				return {
					isArticle: true,
					show_cover_pic: '',
					title: '',
					content_source_url: '',
					otherUrl: '',
					content: '',
					fileId: '',
					digest: '',
					isFromPhone: !!formPhone
				};
			};

			service.validateSaveData = function validateSaveData(item) {
				var isMulti = item.articles.length > 1;
				item.articles = _.filter(item.articles, function (article) {
					return !service.isArticleEmpty(article);
				});
				if (isMulti && service.isArticleEmpty(item.articles[1])) {
					platformModalSvc.showWarmingTip('请完成前两篇图文!');
					if (item.articles.length < 2) {
						item.articles[1] = service.createArticle();
					}
					return false;
				}
				_.forEach(item.articles, function (article) {
					if (angular.isDefined(article.isArticle)) {
						if (article.isArticle) {
							article.content_source_url = completeUrl(article.content_source_url);
							service.omitAttr(article, 'isArticle', 'hasUrl', 'otherUrl');
						} else {
							service.omitAttr(article, 'isArticle', 'hasUrl', 'content', 'content_source_url');
							article.otherUrl = completeUrl(article.otherUrl);
						}

						var content = article.content;
						if (item.articles.length === 1 && !article.digest && content) {
							article.digest = window.deletHtmlTag(content.replace(/&nbsp;/ig,' ')).slice(0, 54);
						}
					}
				});
				return true;
			};
			service.validatePreviewData = function validatePreviewData(item) {
				if(!item.articles){
					return;
				}
				var isMulti = item.articles.length > 1;
				var valiList = _.filter(item.articles, function (article) {
					return !service.isArticleEmpty(article);
				});

				return !(isMulti && service.isArticleEmpty(valiList[1]));
			};

			materialsCacheDataSvc.init(service);
			return service;
		}]);

}(angular));
(function (angular) {
	"use strict";
	angular.module('materials').factory('materialsImgDataSvc', ['basDataSvc', 'nswGlobals', '$http', 'platformModalSvc', function (basDataSvc, nswGlobals, $http, platformModalSvc) {
		var options = {
			uri: 'material/materialInfoImage',
			item: {
				removeUri: 'material/materialInfo',
				loadUri: 'material/materialInfo',
				default: {},
				prepareRemove: function (service, options) {
					options.params.type = 'image';
					options.params.appId = nswGlobals.getValue('appId');
				},
				prepareLoad: function (service, options) {
					options.params.type = 'image';
				}
			},
			list: {
				enableSearch: true,
				enablePaging: true,
				pageSize: 12,
				prepareSearchParam: function (options) {
					options.appId = nswGlobals.getValue('appId');
				},
				selectionMode: 'single'
			}
		};
		var service = basDataSvc.createInstance(options);
		service.loadData();
		var createType;
		service.getCreateType = function getCreateType() {
			return createType;
		};
		service.setCreateType = function setCreateType(type) {
			createType = type;
		};
		service.removeItems = function removeItems(ids) {
			var option = {
				method: 'delete',
				url: globals.basAppRoot + 'material/materialInfo',
				params: {id: ids, type: 'image', appId: nswGlobals.getValue('appId')},
				headers: {'logContent':encodeURI('批量操作')}
			};
			var searchOptions = service.getSearchOptions();
			return $http(option).then(function (res) {
				if (res.data.isSuccess) {
					if (service.getDataList().length <= ids.split(',').length&&searchOptions.pageNum>1) {
						searchOptions.pageNum--;
					}
					service.loadData();
					platformModalSvc.showSuccessTip(res.data.data);

				} else {
					platformModalSvc.showWarmingMessage(res.data.data, '删除失败');
				}
				return res.data;
			});
		};
		service.editImgName = function editImgName(item) {
			var option = {
				method: 'put',
				url: globals.basAppRoot + 'material/materialInfoImage',
				data: item,
				headers: {'logContent':encodeURI('item.name')}
			};

			return $http(option).then(function (res) {
				if (res.data.isSuccess) {
					service.loadData();
					platformModalSvc.showSuccessTip('修改成功!');
				} else {
					platformModalSvc.showWarmingMessage(res.data.data, '修改失败');
				}
				return res.data;
			});
		};
		service.showRenameModal = function showRenameModal(item) {
			options = options || {};
			options.selected = angular.copy(item);
			return platformModalSvc.showModal({
				templateUrl: globals.basAppRoute + 'materials/partials/materials-img-rename-partial.html',
				controller: 'memberDetailCtrl',
				size: 'sm',
				options: options
			}).then(function (member) {
				angular.extend(item, member);
				service.updateItem(item,null,item.name);
			});
		};
		return service;
	}]);

}(angular));
(function (angular) {
	"use strict";
	angular.module("materials").controller("articleLibCtrl", ['$scope', '$state', 'articleLibDataSvc', 'basListCtrlSvc',
		function ($scope, $state, articleLibDataSvc, basListCtrlSvc) {
			basListCtrlSvc.createInstance($scope, articleLibDataSvc, {
				detailState: 'wechat.materialsAdd'
			});
			$scope.syncDisable = false;

			articleLibDataSvc.closeModal = $scope.closeModal;
			$scope.createArticle = function editNews(type) {
				articleLibDataSvc.createArticle(type, $scope.modalOptions.srcModuleName);
				$scope.$close();
			};

			$scope.setCurrentItem({});
			$scope.searchType = function searchType(type,tab){
				$scope.tab = tab;
				articleLibDataSvc.setFilterType(type);
				if($scope.searchOptions) {
					$scope.searchOptions.pageNum = 1;
				}
				$scope.searchData();
			};
			$scope.sync = function sync(){
				$scope.syncDisable = true;
				articleLibDataSvc.sync().then(function(){
					$scope.searchData();
					$scope.syncDisable = false;
				});
			};

			var listLoaded = function listLoaded() {
				var selected = _.find($scope.dataList, $scope.modalOptions.selected);
				if(selected) {
					$scope.setCurrentItem(selected);
				}
			};

			articleLibDataSvc.registerListLoaded(listLoaded);

			$scope.searchData();
			$scope.$on('$destroy',function(){
				articleLibDataSvc.setFilterType('myMaterials');
				articleLibDataSvc.unregisterListLoaded(listLoaded);
			});
		}]);

}(angular));
(function (angular) {
	"use strict";
	angular.module("materials").controller("materialsDetailCtrl", ['$scope', '$state', '$timeout', 'materialsDataSvc', 'basDetailCtrlSvc', 'platformModalSvc',
		function ($scope, $state, $timeout, materialsDataSvc, basDetailCtrlSvc, platformModalSvc) {

			var createSource = materialsDataSvc.getCreateSource(), _isDirty = false;
			$scope.sourceName = materialsDataSvc.getCreateSourceName() || '图文回复';
			basDetailCtrlSvc.createInstance($scope, materialsDataSvc, {
				listState: createSource || 'wechat.materialsList'
			});

			$scope.option = {selectedIndex: 0};
			$scope.option.article = materialsDataSvc.createArticle();
			$scope.type = materialsDataSvc.getCreateType();

			var _formGetter = angular.noop;
			$scope.setForm = function setForm(formGetter) {
				_formGetter = formGetter;
			};

			var getForm = function getForm() {
				return _formGetter.call($scope) || {
						$setDirty: angular.noop,
						$setPristine: angular.noop
					};
			};


			$scope.setArrowIndex = function setArrowIndex(index) {
				$scope.option.selectedIndex = index;
				materialsDataSvc.setArrowIndex(index);
			};

			var init = function init() {
				var articles = $scope.currentItem.articles || [],
					article = articles && articles[0] ? articles[0] : null,
					selectedIndex = materialsDataSvc.getArrowIndex();

				if (!articles.length) {
					$scope.create();
					articles = $scope.currentItem.articles;
					article = articles && articles[0] ? articles[0] : null;
				}

				if ($scope.type === 'single' && articles.length) {
					articles.length = 1;
				}

				if (articles.length) {
					$scope.option.article = article;
					article.isArticle = !article.otherUrl;
					article.hasUrl = !!article.content_source_url;
					if ($scope.type === 'single') {
						if(!article.create_time){
							article.create_time = new Date().toString();
						}

					}
				}

				$scope.setArrowIndex(selectedIndex);
			};
			$scope.hasUrl = function hasUrl() {
				if (!$scope.option.article.hasUrl) {
					$scope.option.article.content_source_url = '';
				}
			};

			$scope.addArticle = function addArticle() {
				$scope.currentItem.articles = $scope.currentItem.articles || [];
				var articles = $scope.currentItem.articles;
				if (articles.length < 8) {
					articles.push(materialsDataSvc.createArticle());
				} else {
					platformModalSvc.showWarmingTip('多图文不能超过8个!');
				}
			};

			$scope.editArticle = function editArticle(index, checkDirty) {
				$scope.option.article = $scope.option.article || {};
				var hasArticle = !!_.find($scope.currentItem.articles, {$$hashKey: $scope.option.article.$$hashKey}),
					formmaterials = getForm();

				_isDirty = _isDirty || formmaterials.$dirty;

				if (!hasArticle || (formmaterials.$valid)) {
					formmaterials.$setPristine();
					var article = $scope.option.article = $scope.currentItem.articles[index];
					article.isArticle = !article.otherUrl;
					article.hasUrl = !!article.content_source_url;
					$scope.setArrowIndex(index);
				} else if (checkDirty) {
					if(!$scope.option.article.fileId){
						platformModalSvc.showWarmingTip('请先上传封面图片!');
					}else{
						platformModalSvc.showWarmingTip('请先完成当前图文!');
					}

				}
			};

			/**
			 * 用于控制表单弹出数据未保存提示
			 */
			$scope.isDataDirty = function isDataDirty(isDirty) {
				return isDirty || _isDirty;
			};

			//$scope.setDataDirty = function setDataDirty(isDirty) {
			//	return _isDirty = isDirty;
			//};

			$scope.saveArticles = function saveArticles() {
				$scope.option.article = angular.copy($scope.option.article); //为了界面不会被刷
				var validateResult = materialsDataSvc.validateSaveData($scope.currentItem),
					formmaterials = getForm();

				if (validateResult) {
					_isDirty = false;
					$scope.save(true, formmaterials,$scope.currentItem.articles[0].title );
					$scope.setArrowIndex(0);
				} else {
					$scope.option.article = $scope.currentItem.articles[$scope.option.selectedIndex];
				}
			};


			var doDeleteArticle = function doDeleteArticle(articles, article, index) {
				articles.splice(index, 1);
				article = articles[index] || articles[index - 1];
				article.isArticle = !article.otherUrl;
				article.hasUrl = !!article.content_source_url;
				$scope.setArrowIndex(_.indexOf(articles, article));
			};

			$scope.deleteArticle = function deleteAtrice(index) {
				var article = $scope.option.article,
					articles = $scope.currentItem.articles,
					formmaterials = getForm();

				if (formmaterials.$valid || article === articles[index]) {
					if (articles.length > 2) {
						platformModalSvc.showConfirmMessage('确认删除文章？', '温馨提示').then(function () {
							doDeleteArticle(articles, article, index);
						});
					} else {
						platformModalSvc.showWarmingTip('多图文最少为2个!');
					}
				} else {
					platformModalSvc.showWarmingTip('请先完成当前图文!');
				}
			};

			$scope.switchToReference = function switchToReference() {
				if (materialsDataSvc.isArticleEmpty($scope.option.article)) {
					$state.go('wechat.materials.apply');
				} else {
					platformModalSvc.showConfirmMessage('切换时内容会清空,你确认要切换吗?', '温馨提示').then(function () {
						angular.extend($scope.option.article, materialsDataSvc.createArticle());
						$state.go('wechat.materials.apply');
					});
				}
			};


			$scope.switchToWrite = function switchToWrite() {
				if (materialsDataSvc.isArticleEmpty($scope.option.article)) {
					$state.go('wechat.materials.add');
				} else {
					platformModalSvc.showConfirmMessage('切换时内容会清空,你确认要切换吗?', '温馨提示').then(function () {
						angular.extend($scope.option.article, materialsDataSvc.createArticle());
						$state.go('wechat.materials.add');
					});
				}
			};

			$scope.resetForm = function resetForm() {
				angular.extend($scope.option.article, materialsDataSvc.createArticle());
			};

			// $scope.isArticleChanged = function isArticleChanged(article) {
			// 	if (!article.isArticle) {
			// 		article.otherUrl = article.otherUrl || 'http://';
			// 	}
			// };
			$scope.isContentChanged = function isContentChanged(article) {
				article.content_source_url = article.content_source_url || 'http://';
			};
			$scope.changeType = function changeType() {
				if (!$scope.option.article.isArticle  ) {
					if($scope.option.article.otherUrl === 'http://'){
						$scope.option.article.otherUrl = '';
					}
				}
			};
			$scope.addHttp = function addHttp(){
				if(!$scope.option.article.otherUrl){
					$scope.option.article.otherUrl = 'http://';
				}
			};

			var onCurrentItemChanged = function onCurrentItemChanged() {
				var selectedIndex = materialsDataSvc.getArrowIndex();
				$timeout(function () {
					$scope.editArticle(selectedIndex);
				});
			};

			var onSaved = function onSaved() {
				_isDirty = false;
			};
			materialsDataSvc.registerCurrentItemChanged(onCurrentItemChanged);

			init();
			materialsDataSvc.registerItemCreated(onSaved);
			materialsDataSvc.registerItemUpdated(onSaved);
			$scope.$on('$destroy', function () {
				//watcher();
				_isDirty = false;
				materialsDataSvc.unregisterCurrentItemChanged(onCurrentItemChanged);
				materialsDataSvc.unregisterItemCreated(onSaved);
				materialsDataSvc.unregisterItemUpdated(onSaved);
			});
		}]);

}(angular));
/*global angular*/
(function (angular) {
	"use strict";
	angular.module("materials").controller("materialsDetailAddCtrl", ['$scope', '$state','materialsDataSvc',
		function ($scope, $state,materialsDataSvc) {
			$scope.valiPreveiw = true;
			var watcher = $scope.$watch('formmaterials.$valid',function(newValue){
				if(newValue){
					$scope.valiPreveiw = materialsDataSvc.validatePreviewData($scope.currentItem);
				}else{
					$scope.valiPreveiw = false;
				}

			});
			$scope.$on('$destroy', function () {
				watcher();
				if ($state.current.name !== 'wechat.materials.apply') {
					$scope.setArrowIndex(0);
				}
			});
			$scope.setForm(function(){
				return $scope.formmaterials;
			});
			if(!$scope.checkAuthed('phoneProj')){
				$scope.goState('wechat.materials.add');
			}

		}]);
}(angular));
/*global angular*/
(function (angular) {
	"use strict";
	angular.module("materials").controller("materialsDetailApplyCtrl", ['$scope', '$state', 'materialsDataSvc', 'basDetailCtrlSvc', 'platformModalSvc', '$timeout', 'materialsCmsDataSvc',
		function ($scope, $state, materialsDataSvc, basDetailCtrlSvc, platformModalSvc, $timeout, materialsCmsDataSvc) {
			$scope.filterOptions = {};
			var initLookup = function initLookup() {
				materialsCmsDataSvc.getAllMBProject().then(function (data) {
					$scope.MBProject = data;
				});
				$scope.getModals = function getModals(){
					materialsCmsDataSvc.getModuleLists({projId: $scope.filterOptions.project}).then(function(data){
						$scope.modules = data;
					});
					$scope.filterOptions.module = '';
					$scope.filterOptions.ctg = '';
				};
				$scope.getCtg = function getCtg() {
					materialsCmsDataSvc.getCtgLists({
						projId: $scope.filterOptions.project,
						moduleId: $scope.filterOptions.module
					}).then(function (data) {
						$scope.ctg = data;
					});
					$scope.filterOptions.ctg = '';
				};
			};

			$scope.searchArticles = function searchArticles() {
				var params = {
					projId:$scope.filterOptions.project,
					moduleId: $scope.filterOptions.module,
					title: $scope.filterOptions.title,
					ctgId: $scope.filterOptions.ctg
				};
				materialsCmsDataSvc.getArticleLists(params).then(function (data) {
					$scope.option.searched = true;
					$scope.option.articles = data;
				});
			};

			$scope.choseArticle = function choseArticle(item) {
				$scope.option.chosed = true;
				if(!$scope.option.article){
					$scope.option.article = {};
				}
				$scope.formmaterials.$dirty = true;
				angular.extend($scope.option.article, materialsCmsDataSvc.choseArticle(item));
			};
			$scope.valiPreveiw = true;
			var watcher = $scope.$watch('formmaterials.$valid',function(newValue){
				if(newValue){
					$scope.valiPreveiw = materialsDataSvc.validatePreviewData($scope.currentItem);
				}else{
					$scope.valiPreveiw = false;
				}

			});
			initLookup();
			$scope.$on('$destroy', function () {
				$scope.option.articles = [];
				watcher();
				if ($state.current.name !== 'wechat.materials.add') {
					$scope.setArrowIndex(0);
				}
			});

			$scope.setForm(function(){
				return $scope.formmaterials;
			});
		}]);
}(angular));
/*global angular*/
(function (angular) {
	"use strict";
	angular.module("materials").controller("materialsImgListCtrl", ['$scope', 'materialsImgDataSvc', 'basListCtrlSvc', 'platformModalSvc',
		function ($scope, materialsImgDataSvc, basListCtrlSvc, platformModalSvc) {
			basListCtrlSvc.createInstance($scope, materialsImgDataSvc);
			$scope.ids = [];
			$scope.imgloadInfo = {};
			$scope.imgloadInfo.over = false;
			$scope.check = function check(item) {
				if (_.has(item, 'ischeck') && item.ischeck) {
					$scope.ids.push(item.id);
				} else {
					_.remove($scope.ids, function (n) {
						return n === item.id;
					});
				}

			};
			$scope.deleteimgs = function deleteimgs() {
				platformModalSvc.showConfirmMessage('确认删除选中的图片？', '删除提示').then(function () {
					materialsImgDataSvc.removeItems($scope.ids.toString()).then(function (data) {
						if (data.isSuccess) {
							$scope.ids.length = 0;
						}
					});
				});
			};
			$scope.editImgName = function editImgName(item) {
				materialsImgDataSvc.editImgName(item);
			};
			$scope.editNickName = function editNickName(item) {
				materialsImgDataSvc.showRenameModal(item);
			};
			$scope.allimg = function allimg() {
				$scope.searchOptions.filter = '';
				$scope.searchData();
			};
			$scope.searchData().then(function(){
				$scope.imgloadInfo.over = true;
			});

		}]);
}(angular));
(function (angular) {
	"use strict";
	angular.module("materials").controller("materialsRenameCtrl", ['$scope', 'basDetailCtrlSvc', 'materialsImgDataSvc',
		function ($scope, basDetailCtrlSvc, materialsImgDataSvc) {
			basDetailCtrlSvc.createInstance($scope, materialsImgDataSvc);
		}]);
}(angular));
/*global angular*/
(function (angular) {
	"use strict";
	angular.module("materials").controller("materialsListCtrl", ['$scope', '$state', 'materialsDataSvc', 'materialsImgDataSvc',
		function ($scope, $state, materialsDataSvc, materialsImgDataSvc) {
			//var newLength;

			$scope.imgurl = 'material/image/upload?appId=' + materialsDataSvc.getAppId();
			$scope.tab = 1;

			$scope.selectTab = function selectTab(tab) {
				$scope.tab = tab;
			};
			$scope.changeFile = function changeFile() {
				var searchOptions = materialsImgDataSvc.getSearchOptions();
				searchOptions.pageNum = 1;
				searchOptions.filter = '';
				materialsImgDataSvc.loadData();
			};
			var create = function create() {
				materialsDataSvc.createNew();
				if($scope.checkAuthed('phoneProj')) {
					$state.go('wechat.materials.apply');
				}else{
					$state.go('wechat.materials.add');
				}
			};

			$scope.createSingle = function createSingle() {
				materialsDataSvc.setCreateType("single");
				create();
			};
			$scope.createMultiple = function createMultiple() {
				materialsDataSvc.setCreateType("multiple");
				create();
			};

			var onListLoaded = function onListLoaded() {
				var totalRows = materialsDataSvc.getSearchOptions().totalRows;
				$scope.tabTitle = '图文素材(' + totalRows + ')';
			};

			var scrollToTop = function scrollToTop(){
				$('html,body').animate({scrollTop: '0px'}, 300);
			};
			var itemRemoved = function itemRemoved(){
				var totalRows = materialsDataSvc.getSearchOptions().totalRows-1;
				$scope.tabTitle = '图文素材(' + totalRows + ')';
			};
			materialsDataSvc.registerListLoaded(onListLoaded);
			materialsDataSvc.registerListLoaded(scrollToTop);
			materialsImgDataSvc.registerListLoaded(scrollToTop);

			materialsDataSvc.registerItemRemoved(itemRemoved);
			$scope.$on('$destroy',function(){
				materialsDataSvc.unregisterListLoaded(onListLoaded);
				materialsDataSvc.unregisterListLoaded(scrollToTop);
				materialsImgDataSvc.unregisterListLoaded(scrollToTop);
				materialsDataSvc.unregisterItemRemoved(itemRemoved);
			});
		}]);
}(angular));
/*global angular*/
(function(angular){
    "use strict";
	angular.module("materials").controller("materialsNewsListCtrl",['$scope','materialsDataSvc','basListCtrlSvc','platformModalSvc' ,
		function($scope,materialsDataSvc, basListCtrlSvc,platformModalSvc){
			basListCtrlSvc.createInstance($scope, materialsDataSvc,{
				detailState:'wechat.materials.add'
			});
			$scope.loadInfo = {};
			$scope.loadInfo.over = false;
			$scope.editNews = function editNews(item){
				if(_.has(item,"articles")&&item.articles.length>1){
					materialsDataSvc.setCreateType("multiple");
				}else{
					materialsDataSvc.setCreateType("single");
				}
				$scope.edit(item);
			};
			$scope.allMaterial = function allMaterial() {
				$scope.searchOptions.filter = '';
				$scope.searchData();
			};
			$scope.searchNewsData = function searchNewsData(){
				if(!$scope.searchOptions.filter){
					platformModalSvc.showWarmingTip("请输入搜索的标题!");
				}else{
					$scope.searchData();
				}
			};

			$scope.searchData().then(function(){
				$scope.loadInfo.over = true;
			});

	}]);
}(angular));
(function (angular) {
	"use strict";
	angular.module('menu', ['platform']).config(['$stateProvider', function ($stateProvider) {
		$stateProvider
			.state('wechat.menu', {
				url: '/menu',
				controller: 'menuDetailCtrl',
				templateUrl: globals.basAppRoute + 'menus/partials/menu-detail-partial.html'
			})
			.state('wechat.enable-menu', {
				url: '/enable-menu',
				controller: 'menuEnableCtrl',
				templateUrl: globals.basAppRoute + 'menus/partials/menu-enable-partial.html'
			});
	}]);

}(angular));
(function (angular) {
	"use strict";
	angular.module('menu').factory('menuCmsDataSvc', ['$timeout', 'basDataSvc',
		function ($timeout, basDataSvc) {
			var options = {
				list: {
					enableSearch: true,
					enablePaging: true,
					listUri: 'cms/getPublishedArticle',
					selectionMode: 'single',
					pageSize: 6
				}
			};
			return basDataSvc.createInstance(options);
		}]);

}(angular));
(function (angular) {
	"use strict";
	angular.module('menu').factory('menuDataSvc', ['$timeout', 'basDataSvc', 'nswGlobals', '$state', 'materialsDataSvc', 'materialsImgDataSvc', 'platformImgLibSvc', 'platformModalSvc', 'accountDataSvc','platformMenuDataSvc','$q','$http',
		function ($timeout, basDataSvc, nswGlobals, $state, materialsDataSvc, materialsImgDataSvc, platformImgLibSvc, platformModalSvc, accountDataSvc, platformMenuDataSvc,$q,$http) {
			var options = {
				uri: 'menu/menuInfo',
				item: {
					prepareLoad: function (service, options) {
						options.params.appId = nswGlobals.getValue('appId');
						_.omit(options.params, 'id');
					},
					default: {
						//name: 'test'
						enable: false
					}
				},
				list: {
					enableSearch: true,
					listUri: 'menu/getWxMenuList',
					selectionMode: 'single'
				}
			};
			var service = basDataSvc.createInstance(options), menus = [],
				creatingMaterial = false, articles = {};


			service.registerItemLoaded(function (item) {
				menus = service.getMenus();
				item.appId = nswGlobals.getValue('appId');
				item.button = item.button || [];
				menus.length = 0;
				_.forEach(item.button, function (button, index) {
					menus[index] = button;
				});

				service.setCurrentItem(item);
			});

			service.isCreatingMaterial = function isCreatingMaterial(){
				return creatingMaterial;
			};

			service.getMenus = function getMenus() {
				var data = service.getCurrentItem() || {};
				return data.button || [];
			};

			service.setCurrentSubMenu = function setCurrentSubMenu(sub) {
				service.selectedSubMenu = sub;
			};

			service.setCurrentMenu = function setCurrentMenu(menu) {
				service.currentMenu = menu;
			};

			service.setSelected = function setSelected(item) {
				service.selected = item;
			};

			service.checkExists = function checkExists(source, item, name) {
				var exists = false;
				name = name || item.name;
				_.forEach(service.getMenus(), function (menu) {
					exists = menu !== item && menu.name === name;
					if (!exists) {
						_.forEach(menu.sub_button, function (sub) {
							exists = sub !== item && sub.name === name;
							if (exists) {
								return false;
							}
						});
					}
					if (exists) {
						return false;
					}
				});
				return exists;
			};

			service.removeAttr = function removeAttr(obj, attr) {
				if (obj.hasOwnProperty(attr)) {
					delete  obj[attr];
				}
			};

			service.resetMenu = function resetMenu(selected) {
				service.removeAttr(selected, 'url');
				service.removeAttr(selected, 'key');
				service.removeAttr(selected, 'materialType');
				service.removeAttr(selected, 'picName');
				service.removeAttr(selected, 'keyWord');
			};

			service.selectImg = function selectImg(file) {
				if (file) {
					service.resetMenu(service.selected);
					service.removeAttr(service.selected, 'url');
					service.selected.key = file.fileId;
					service.selected.materialType = 'pic';
					service.selected.picName = file.name || file.fileName;
				}
			};
			service.selectKeyWord = function selectKeyWord(file) {
				if (file) {
					service.resetMenu(service.selected);
					service.removeAttr(service.selected, 'url');
					service.selected.key = file.rule.id;
					service.selected.materialType = 'keyWord';
					service.selected.keyWord = file.keyword ;
					service.fetchMaterialById(file.rule.id,'keyWord');
				}
			};

			service.showArtcileLib = function showArtcileLib() {
				creatingMaterial = true;
				platformModalSvc.showModal({
					controller: 'articleLibCtrl',
					templateUrl: globals.basAppRoute + 'materials/templates/articles-lib.html',
					size: 'lg',
					options: {
						selected: {
							id: service.selected.key
						},
						srcModuleName:'自定义菜单'
					}
				}).then(function (material) {
					$state.go('wechat.menu');
					service.resetMenu(service.selected);
					articles[material.id] = material;
					service.selected.key = material.id;
					service.selected.materialType = 'news';
					creatingMaterial = false;
				});
			};

			service.selectImageLib = function selectImageLib() {
				creatingMaterial = true;
				platformImgLibSvc.showImgLibModal({
						count: 1,
						size: 300,
						width: 800,
						height: 800,
						ext: 'gif,jpg,jpeg,bmp,png'
					}, articles[service.selected.key])
					.then(function (image) {
						$state.go('wechat.menu');
						service.selectImg(image);
						creatingMaterial = false;
					});
			};

			var checkUrl = function checkUrl(menu) {
				if (menu.type === 'view') {
					var url = menu.url || '';
					if (url && !/^(http|ftp|https):\/\//.test(url)) {
						menu.url = 'http://' + url;
					}
				}
			};

			service.validateSaveData = function validateSaveData(parent, buttons) {
				buttons = buttons || service.getCurrentItem().button;
				var invalidItem = null;
				_.forEach(buttons, function (button) {
					var hasSub = button.sub_button && button.sub_button.length;
					if (!hasSub) {
						if (button.type === 'click' && !button.key) {
							invalidItem = {
								parent: parent,
								selected: button,
								desc: '没有选择相关的素材'
							};
							return false;
						} else if (button.type === 'view') {
							checkUrl(button);
							if (!button.url) {
								invalidItem = {
									parent: parent,
									selected: button,
									desc: '没有选择菜单的URL'
								};
							}
						} else if (!button.type) {
							invalidItem = {
								parent: parent,
								selected: button,
								desc: '没有选择菜单类型'
							};
						}
					}
					if (!invalidItem && button.sub_button) {
						invalidItem = service.validateSaveData(button, button.sub_button);
					}
					return !invalidItem;
				});
				return invalidItem;
			};

			var create = function create() {
				materialsDataSvc.createNew();
				/*$state.go('wechat.materials.apply');*/
				if(materialsDataSvc.checkAuthed('phoneProj')) {
					$state.go('wechat.materials.apply');
				}else{
					$state.go('wechat.materials.add');
				}
			};

			service.createArticle = function createArticle(type) {
				materialsDataSvc.setCreateType(type,'wechat.menu','自定义菜单');
				create();
				creatingMaterial = true;
			};

			var materialCreated = function materialCreated(material) {
				if (!creatingMaterial || !service.selected) {
					return;
				}
				creatingMaterial = false;

				if (service.selected.hasOwnProperty('url')) {
					delete  service.selected.url;
				}

				articles[material.id] = material;
				service.selected.key = material.id;
				service.selected.materialType = 'news';
			};

			service.getMaterials = function getMaterials() {
				return articles;
			};
			service.loadKeyWordInfo = function loadKeyWordInfo(id){
				var defer = $q.defer();
				var options = {
					url:globals.basAppRoot + 'keyWord/reply',
					method:'get',
					params:{
						id:id
					}
				};
				return $http(options).then(function(res){
					if(res.data.isSuccess){
						defer.resolve(res.data.data);
					}else{
						defer.reject(res.data.data);
					}
					return defer.promise;
				});
			};

			service.fetchMaterialById = function fetchMaterialById(id, type) {
				//if (!id) {
				//	return;
				//}
				if (type === 'news') {
					materialsDataSvc.loadItemById(id).then(function (material) {
						articles[id] = material;
					});
				}
				if(type === 'keyWord'){
					service.loadKeyWordInfo(id).then(function(data){
						if(data.replyType==='news'){
							materialsDataSvc.loadItemById(data.mediaId).then(function (material) {
								articles[id] ={
									data:material,
									keyWordReplyType:'news'
								} ;
							});
						}else if(data.replyType==='pic'){
							articles[id] ={
								data:data.fileId,
								keyWordReplyType:'pic'
							};
						}else{
							articles[id] ={
								data:data.content,
								keyWordReplyType:'txt'
							};
						}
					});
				}
			};

			service.registerItemLoaded(function (item) {
				_.forEach(item.button, function (button) {
					if (button.type === 'click') {
						service.fetchMaterialById(button.key, button.materialType);
					}
					_.forEach(button.sub_button, function (sub) {
						if (sub.type === 'click') {
							service.fetchMaterialById(sub.key, sub.materialType);
						}
					});
				});
			});

			var accountChanged = function accountChanged(account) {
				service.selected = null;
				service.selectedSubMenu =null;
				service.currentMenu = null;
				if(account && account.appId) {
					service.loadItemById();
				}else{
					service.createNew();
				}
			};

			var selectedMenuChanged = function selectedMenuChanged(){
				creatingMaterial = false;
			};

			materialsDataSvc.registerItemCreated(materialCreated);
			accountDataSvc.registerCurrentItemChanged(accountChanged);
			platformMenuDataSvc.registerMenuSelected(selectedMenuChanged);

			//service.loadItemById();
			accountChanged();

			return service;
		}]);

}(angular));
(function (angular) {
	"use strict";
	angular.module('menu').factory('menuKeyWordSvc', ['basDataSvc',
		function (basDataSvc) {
			var options = {
				requireAppId: true,
				list: {
					enableSearch: true,
					enablePaging: true,
					listUri: 'keyWord/list',
					prepareSearchParam: function (options) {
						options.type = 1;
					},
					selectionMode: 'multi',
					pageSize:100000
				}
			};
			var service = basDataSvc.createInstance(options),currentTag;
			service.setCurrentTag = function setCurrentTag(tag){
				currentTag = tag;
			};
			service.getCurrentTage = function getCurrentTag(){
				return currentTag;
			};
			return service;
		}]);

}(angular));
(function (angular) {
	"use strict";
	angular.module('menu').controller('menuCmsMobileCtrl', ['$scope','menuCmsDataSvc','basListCtrlSvc' ,
		function ($scope,menuCmsDataSvc,basListCtrlSvc) {
		basListCtrlSvc.createInstance($scope, menuCmsDataSvc);
			$scope.searchData();
			$scope.isItemSelected = function isItemSelected(item) {
				return !!_.find(menuCmsDataSvc.getSelectedItems(), {url: item.url});
			};
	}]);

}(angular));
(function (angular) {
    "use strict";

    angular.module('menu').controller('menuDetailCtrl', ['$scope', 'menuDataSvc', 'basDetailCtrlSvc', 'platformModalSvc', '$state', 'platformNavigationSvc',
        function ($scope, menuDataSvc, basDetailCtrlSvc, platformModalSvc, $state, platformNavigationSvc) {
            basDetailCtrlSvc.createInstance($scope, menuDataSvc, {
                notCopyCurrent: true,
                tip: {showLoading: false}
            });
            $scope.imgurl = 'material/image/upload?appId=' + $scope.appId;
            $scope.currentMenu = menuDataSvc.currentMenu;
            $scope.selected = menuDataSvc.selected;
            $scope.editModel = true;
            $scope.materials = menuDataSvc.getMaterials();


            var itemWatcher = angular.noop();

            var comparenMenu = function comparenMenu(newVal, oldVal) {
                var result = false;
                _.forEach(newVal, function (val, prop) {
                    if (oldVal && oldVal[prop] !== val) {
                        result = true;
                        return false;
                    }
                });
                return result;
            };

            var setDirty = function setDirty(val, force) {
                if (force) {
                    $scope.isDirty = val;
                } else if (!$scope.isDirty) {
                    $scope.isDirty = val;
                }
            };

            var enableWatch = function enableWatch() {
                itemWatcher = $scope.$watch('selected', function (newVal, oldVal) {
                    setDirty(comparenMenu(newVal, oldVal));
                }, true);
            };

            var disableWatch = function disableWatch() {
                if (angular.isFunction(itemWatcher)) {
                    itemWatcher();
                }
            };

            var updateSelected = function updateSelected() {
                var selected;
                if ($scope.selected && $scope.selected.materialType === 'news') {
                    selected = 'message';
                } else if ($scope.selected && $scope.selected.materialType === 'keyWord') {
                    selected = 'keyWord';
                } else {
                    selected = 'pic';
                }
                $scope.selectTab(selected);
            };

            updateSelected();

            var showInputModal = function showInputModal(menu, options, callBack) {
                var source = angular.copy(menu);
                options = options || {};
                options.selected = source;
                platformModalSvc.showModal({
                    templateUrl: globals.basAppRoute + 'menus/partials/menu-rename-partial.html',
                    controller: 'menuRenameCtrl',
                    size: 'sm',
                    options: options
                }).then(function () {
                    callBack(source);
                    setDirty(true);
                });
            };
            var showCmsMobileModal = function showCmsMobileModal(options, callBack) {
                options = options || {};
                platformModalSvc.showModal({
                    templateUrl: globals.basAppRoute + 'menus/partials/menu-cms-mobile-partial.html',
                    controller: 'menuCmsMobileCtrl',
                    size: 'md',
                    options: options
                }).then(function (data) {
                    callBack(data);
                    setDirty(true);
                });
            };
            $scope.getCmsMobileUrl = function () {
                var opt = {url: $scope.selected.url};
                showCmsMobileModal(opt, function (data) {
                    $scope.selected.url = data.url;
                });
            };
            var getKeyWordModel = function getKeyWordModel(options, callBack) {
                options = options || {};
                platformModalSvc.showModal({
                    templateUrl: globals.basAppRoute + 'menus/partials/menu-key-word-partial.html',
                    controller: 'menuKeyWordCtrl',
                    size: 'md',
                    options: options
                }).then(function (data) {
                    callBack(data);
                    setDirty(true);
                });
            };
            $scope.disable = function disable() {
                menuDataSvc.loadItemById().then(function () {
                    $scope.currentItem.enable = false;
                    $scope.currentMenu = null;
                    $scope.selected = null;
                    menuDataSvc.selected = null;
                    menuDataSvc.currentMenu = null;
                    menuDataSvc.updateItem().then(function () {
                        $state.go('wechat.enable-menu');
                    });
                });
            };

            $scope.createMenu = function createMenu(parent) {
                if ($scope.currentItem.button && $scope.currentItem.button.length !== 0 && $scope.menuForm.name && $scope.menuForm.name.$invalid) {
                    platformModalSvc.showWarmingTip('当前菜单名不合法!');
                } else {
                    var newItem = {type: 'click'};
                    if (parent) {
                        parent.sub_button.push(newItem);
                        $scope.selectSubMenu(newItem);
                        $scope.resetMenu(parent);
                    } else {
                        newItem.sub_button = [];
                        $scope.currentItem.button.push(newItem);
                        $scope.selectMenu(newItem);
                    }
                }

            };
            $scope.selectedNameChange = function selectedNameChange() {
                if (menuDataSvc.checkExists(null, $scope.selected)) {
                    platformModalSvc.showWarmingTip('该名称已经存在,请重新命名？');
                }
            };

            $scope.validateName = function validateName(name) {

                return !menuDataSvc.checkExists(null, $scope.selected, name);
            };

            $scope.selectSubMenu = function selectSubMenu(subMenu) {
                if ($scope.menuForm.name && $scope.menuForm.name.$invalid) {
                    platformModalSvc.showWarmingTip('菜单名不合法!');
                } else {
                    disableWatch();
                    menuDataSvc.setCurrentSubMenu(subMenu);
                    $scope.currentSubMenu = subMenu;
                    $scope.selected = subMenu;
                    menuDataSvc.selected = subMenu;
                    updateSelected();
                    enableWatch();
                }
            };

            $scope.selectMenu = function selectMenu(menu) {
                if ($scope.menuForm.name && $scope.menuForm.name.$invalid) {
                    platformModalSvc.showWarmingTip('菜单名不合法!');
                } else {
                    disableWatch();
                    $scope.currentMenu = menu;
                    $scope.selected = menu;
                    menuDataSvc.selected = menu;
                    menuDataSvc.currentMenu = menu;
                    updateSelected();
                    enableWatch();
                }
            };

            $scope.removeMenu = function removeMenu(menu) {
                platformModalSvc.showConfirmMessage('删除确认', '温馨提示', '删除后该菜单下设置的消息将同步被删除！').then(function () {
                    if (menu === $scope.currentMenu) {
                        _.remove($scope.currentItem.button, menu);
                    } else if (menu === $scope.currentSubMenu) {
                        _.remove($scope.currentMenu.sub_button, menu);
                    }
                    $scope.selected = null;
                });
            };

            $scope.reNameMenu = function reNameMenu(menu) {
                showInputModal(menu, {title: '修改菜单名称'}, function (item) {
                    if (menuDataSvc.checkExists(menu, item)) {
                        platformModalSvc.showConfirmMessage('该名称已经存在,是否需要重新命名？', '温馨提示').then(function () {
                            $scope.reNameMenu(menu);
                        });
                        return false;
                    }
                    menu.name = item.name;
                });
            };

            $scope.setType = function setType() {
                if ($scope.selected.type === 'view'&& $scope.selected.url === 'http://') {
                    $scope.selected.url = '';
                    $("#menUrl").focus(function(){
                        $scope.selected.url = 'http://';
                    });


                }
            };

            $scope.showArtcileLib = function showArtcileLib() {
                menuDataSvc.showArtcileLib();
            };

            $scope.showImageLib = function showImageLib() {
                menuDataSvc.selectImageLib();
            };

            $scope.selectImg = function selectImg(file) {
                menuDataSvc.selectImg(file);
            };

            $scope.removeImg = function removeImg(img) {
                menuDataSvc.removeAttr(img, 'url');
                menuDataSvc.removeAttr(img, 'key');
                menuDataSvc.removeAttr(img, 'picName');
            };

            $scope.removeArticle = function removeArticle(article) {
                menuDataSvc.removeAttr(article, 'url');
                menuDataSvc.removeAttr(article, 'key');
            };


            $scope.resetMenu = function resetMenu(selected) {
                menuDataSvc.resetMenu(selected);
            };

            $scope.createArticle = function createArticle(type) {
                menuDataSvc.createArticle(type, $scope.selected);
            };

            $scope.toggleSortable = function toggleSortable() {
                $scope.enableSort = !$scope.enableSort;
            };

            $scope.saveMenu = function saveMenu() {
                var validateError = menuDataSvc.validateSaveData();
                if (validateError) {
                    if (!validateError.sub_button) {
                        $scope.selectMenu(validateError.parent);
                        $scope.selectSubMenu(validateError.selected);
                    } else {
                        $scope.selectMenu(validateError.selected);
                    }

                    platformModalSvc.showErrorMessage('验证错误', '验证错误', '菜单：' + validateError.selected.name + '<br/> 错误信息：' + validateError.desc);
                } else {
                    $scope.save(true,null,'保存菜单');
                }
            };

            var currentItemChanged = function currentItemChanged(menu) {
                if (!menu.enable) {
                    $state.go('wechat.enable-menu');
                }
            };

            var itemUpdated = function itemUpdated(menu) {
                if (menuDataSvc.currentMenu && menuDataSvc.selected) {
                    menuDataSvc.currentMenu = _.find(menu.button, {name: menuDataSvc.currentMenu.name}) || {};
                    menuDataSvc.selected = menuDataSvc.selected.name === menuDataSvc.currentMenu.name ?
                        menuDataSvc.currentMenu : _.find(menuDataSvc.currentMenu.sub_button, {name: menuDataSvc.selected.name});
                    $scope.currentMenu = menuDataSvc.currentMenu;
                    $scope.selected = menuDataSvc.selected;
                    setDirty(false, true);
                }
            };

            var onRouteWillUpdated = function onRouteWillUpdated(e) {
                if ($scope.isDirty) {
                    e.confirm = platformModalSvc.showConfirmMessage('当前页面没有保存是否确认离开？', '温馨提示').then(function () {
                        e.stop = false;
                        $scope.$emit('formDirtyInfo', e);
                        menuDataSvc.currentMenu = null;
                        menuDataSvc.selected = null;
                        return true;
                    }, function () {
                        e.stop = true;
                        $scope.$emit('formDirtyInfo', e);
                        return false;
                    });
                } else {
                    menuDataSvc.currentMenu = null;
                    menuDataSvc.selected = null;
                    $scope.$emit('formDirtyInfo', {dirty: false});
                }
            };
            $scope.getKeyWords = function getKeyWords() {
                var opt = {keyWord: $scope.selected.keyWord, id: $scope.selected.key};
                getKeyWordModel(opt, function (data) {
                    $scope.selected.keyWord = data.keyword;
                    menuDataSvc.selectKeyWord(data);
                    $scope.materials = menuDataSvc.getMaterials();
                });
            };

            $scope.isContentChanged = function isContentChanged() {
                $scope.selected.url = $scope.selected.url || 'http://';
            };

            platformNavigationSvc.registerRouteWillUpdated(onRouteWillUpdated);
            menuDataSvc.registerCurrentItemChanged(currentItemChanged);
            menuDataSvc.registerItemUpdated(itemUpdated);

            $scope.$on('$destroy', function () {
                menuDataSvc.unregisterCurrentItemChanged(currentItemChanged);
                menuDataSvc.unregisterItemUpdated(itemUpdated);
                platformNavigationSvc.unregisterRouteWillUpdated(onRouteWillUpdated);
                disableWatch();
                if (!menuDataSvc.isCreatingMaterial()) {
                    menuDataSvc.loadItemById();
                }
            });

            //menuDataSvc.loadItemById();

        }]);

}(angular));
(function (angular) {
	"use strict";

	angular.module('menu').controller('menuEnableCtrl', ['$scope', 'menuDataSvc', 'basDetailCtrlSvc', 'platformModalSvc', 'accountDataSvc', '$state',
		function ($scope, menuDataSvc, basDetailCtrlSvc, platformModalSvc, accountDataSvc, $state) {
			basDetailCtrlSvc.createInstance($scope, menuDataSvc);

			var goEdit = function goEdit() {
				$state.go('wechat.menu');
			};

			$scope.enableMenu = function enableMenu() {
				platformModalSvc.showWarmingMessage('开启自定义菜单之后，将在24小时内对所有用户生效,确定开启吗？', '操作提示').then(function () {
					$scope.currentItem.enable = true;
					menuDataSvc.updateItem($scope.currentItem).then(function (res) {
						angular.extend(menuDataSvc.getCurrentItem(), res.data);
						goEdit();
					});
				});
			};

			var currentItemChanged = function currentItemChanged(menu) {
				if (menu.enable) {
					goEdit();
				}
			};

			menuDataSvc.registerCurrentItemChanged(currentItemChanged);
			$scope.$on('$destroy', function () {
				menuDataSvc.unregisterCurrentItemChanged(currentItemChanged);
			});
			menuDataSvc.loadItemById();
		}]);

}(angular));
(function (angular) {
	"use strict";
	angular.module('menu').controller('menuKeyWordCtrl', ['$scope','menuKeyWordSvc','basListCtrlSvc', function ($scope,menuKeyWordSvc,basListCtrlSvc) {
		basListCtrlSvc.createInstance($scope, menuKeyWordSvc, {});
		$scope.searchData();
		$scope.selectedItem = {};
		if($scope.modalOptions){
			$scope.selectedItem.keyword = $scope.modalOptions.keyWord;
			$scope.selectedItem.rule = {id : $scope.modalOptions.id};
		}
		$scope.isShow = true;
		$scope.selectRule = function selectRule(item){
				$scope.currentrRule = item;
		};
		$scope.selectKeyword = function selectKeyword(rule,tag){
			$scope.selectedItem.keyword = tag;
			$scope.selectedItem.rule = rule;
		};
		$scope.selectedTag = function selectedTag(item,tag){
			return $scope.selectedItem.keyword===tag&&$scope.selectedItem.rule.id===item.id;
		};
		$scope.deleteTag = function deleteTag(){
			$scope.selectedItem.keyword = '';
		};

		$scope.selectedKeyword = function selectedKeyword(item){
			return $scope.selectedItem.keyword===item;
		};
	}]);

}(angular));
(function (angular) {
	"use strict";

	angular.module('menu').controller('menuListCtrl', ['$scope', 'basListCtrlSvc', 'menuDataSvc', function ($scope, basListCtrlSvc, menuDataSvc) {
		basListCtrlSvc.createInstance($scope, menuDataSvc);

		$scope.createMenu = function createMenu(parent,$event) {
			var item = menuDataSvc.createNew();
			item.code = '00' + $scope.dataList.length;
			if(parent) {
				item.parentCode = parent.code;
				$event.preventDefault();
			}
			$scope.dataList.push(item);
		};

		$scope.selectSubMenu = function selectSubMenu(subMenu,$event){
			menuDataSvc.setCurrentSubMenu(subMenu);
			$scope.currentSubMenu = subMenu;
			$event.preventDefault();
		};

		$scope.selectMenu = function selectMenu(menu){
			$scope.currentMenu = menu;
		};


		$scope.$watch('dataList.length',function(){
			$scope.rootItems =_.filter($scope.dataList, function(node){
				return !node.parentCode;
			});
		});
	}]);

}(angular));
(function (angular) {
	"use strict";
	angular.module('menu').controller('menuRenameCtrl', ['$scope', function ($scope) {
		$scope.maxCount = $scope.modalOptions.maxCount ||(!!$scope.modalOptions.selected.sub_button ? 8 : 16);
	}]);

}(angular));
(function (angular) {
	"use strict";
	angular.module('menu').directive('menuSub', [function () {
		return {
			restrict: 'A',
			scope: {
				parent:'=',
				menus: '=',
				selected:'=',
				selectSubMenu: '=',
				addSubMenu: '='
			},
			templateUrl: globals.basAppRoute + 'menus/templates/menu-sub-dir.html',
			link: function (scope) {
				scope.menus = scope.menus || [];

				scope.selectMenu  = function selectMenu(menu){
					scope.currentMenu = menu;
				};

				scope.addMenu = function addMenu(){
					scope.addSubMenu(scope.parent);
				};

				scope.$watch('menus.length',function(){
					scope.subMenus = _.filter(scope.menus,{parentCode:scope.parent.code});
				});

				scope.getSelectedClass = function getSelectedClass(menu){
					if(menu === scope.selected){
						return 'current';
					}
				};
			}
		};
	}]);

}(angular));
/*global angular*/
(function(angular){
    "use strict";
	angular.module('autoReply',['platform']).config(['$stateProvider', '$urlRouterProvider',function ($stateProvider, $urlRouterProvider){
		$stateProvider.state('wechat.autoReplyOnFollow', {
			url: '/replyOnFollow',
			templateUrl:  globals.basAppRoute+'auto-reply/partials/reply-on-follow.html',
			controller: 'replyOnFollowCtrl'
		}).state('wechat.keywordautoReply', {
			url: '/keywordautoReply',
			templateUrl:  globals.basAppRoute+'auto-reply/partials/keyword-reply.html',
			controller: 'replyKeyWordCtrl'
		}).state('wechat.noMatchReply', {
			url: '/noMatchReply',
			templateUrl:  globals.basAppRoute+'auto-reply/partials/no-match-reply.html',
			controller: 'noMatchReplyCtrl'
		});
	}]);
}(angular));
(function (angular) {
    "use strict";
    angular.module('autoReply').factory('autoReplyDataSvc', ['basDataSvc', 'platformModalSvc', 'nswGlobals', '$q', 'materialsImgDataSvc',
        function (basDataSvc, platformModalSvc, nswGlobals, $q, materialsImgDataSvc) {
            var options = {
                name:'autoReplyData',
                requireAppId: true,
                uri: 'keyWord/reply',
                item: {
                    default: {
                        content: '',
                        type: 0,
                        replyType: 'txt'
                    },
                    afterCreated:function(item){
                        item.appId = nswGlobals.getValue('appId');
                    },
                    prepareCreate: function (service, options) {
                        service.filterData(options.data);
                    },
                    prepareUpdate: function (service, options) {
                        service.filterData(options.data);
                    }
                },
                list: {
                    enableSearch: true,
                    enablePaging:true,
                    listUri: 'keyWord/attentionOrMatching',
                    prepareSearchParam: function (options) {
                        options.type = 0;
                    },
                    selectionMode: 'single'
                    //pageSize: 6
                },
                cache:{
                    getCache:function(){

                    },
                    applyCache:function(){

                    }
                }
            };
            var service = basDataSvc.createInstance(options);
            service.filterData = function filterData(data) {
                if (data.replyType === 'pic') {
                    if (data.hasOwnProperty('content')) {
                        delete  data.content;
                    }
                    if (data.hasOwnProperty('mediaId')) {
                        delete  data.mediaId;
                    }
                } else if (data.replyType === 'news') {
                    if (data.hasOwnProperty('content')) {
                        delete  data.content;
                    }
                    if (data.hasOwnProperty('fileId')) {
                        delete  data.fileId;
                    }
                } else {
                    if (data.hasOwnProperty('mediaId')) {
                        delete  data.mediaId;
                    }
                    if (data.hasOwnProperty('fileId')) {
                        delete  data.fileId;
                    }
                }
            };
            return service;
        }]);

}(angular));
(function (angular) {
	"use strict";
	angular.module('autoReply').factory('keyWordReplyDataSvc', ['basDataSvc', 'platformMenuDataSvc', 'platformModalSvc', 'nswGlobals', '$q', '$http',
		function (basDataSvc, platformMenuDataSvc, platformModalSvc, nswGlobals, $q, $http) {
			var options = {
				requireAppId: true,
				uri: 'keyWord/reply',
				item: {
					default: {
						matchType: 0,
						replyType: 'txt',
						keyWordList: ['', '', ''],
						type: 1
					},
					afterCreated:function(item){
						item.appId = nswGlobals.getValue('appId');
					},
					prepareCreate: function (service, options) {
						service.filterData(options.data);
					},
					prepareRemove: function (service, options) {
						options.params.appId = nswGlobals.getValue('appId');
						options.params.ids = [];
						options.params.ids.push(options.params.id);
						_.omit(options.params, 'id');
					}
				},
				list: {
					enableSearch: true,
					enablePaging: true,
					listUri: 'keyWord/list',
					prepareSearchParam: function (options) {
						options.type = 1;
					},
					selectionMode: 'multi',
					pageSize:10
				}
			};
			var service = basDataSvc.createInstance(options);
			service.loadData();
			service.showArtcileLib = function showArtcileLib(type) {
				var defer = $q.defer();
				platformModalSvc.showModal({
					controller: 'articleLibCtrl',
					templateUrl: globals.basAppRoute + 'materials/templates/articles-lib.html',
					size: 'lg',
					options: {
						type: type
					}
				}).then(function (material) {
					defer.resolve(material);
				});
				return defer.promise;
			};
			service.setSelected = function setSelected(item) {
				service.selected = item;
			};
			service.filterData = function filterData(data) {
				if (data.replyType === 'pic') {
					if (data.hasOwnProperty('content')) {
						delete  data.content;
					}
					if (data.hasOwnProperty('mediaId')) {
						delete  data.mediaId;
					}
				} else if (data.replyType === 'news') {
					if (data.hasOwnProperty('content')) {
						delete  data.content;
					}
					if (data.hasOwnProperty('fileId')) {
						delete  data.fileId;
					}
				} else {
					if (data.hasOwnProperty('mediaId')) {
						delete  data.mediaId;
					}
					if (data.hasOwnProperty('fileId')) {
						delete  data.fileId;
					}
				}
			};

			service.removeItems = function removeItems(ids) {
				var options = {
					method: 'delete',
					url: globals.basAppRoot + 'keyWord/reply',
					params: {ids: ids, appId: nswGlobals.getValue('appId')},
					headers: {'logContent':encodeURI('批量操作')}
				};
				return $http(options).then(function (res) {
					if (res.data.isSuccess) {
						var pageNum = service.getSearchOptions();
						if (service.getDataList().length === ids.length&&pageNum>1) {
							pageNum.pageNum--;
							service.loadData();
						}
						service.loadData();
						platformModalSvc.showSuccessTip(res.data.data);
					} else {
						platformModalSvc.showWarmingMessage(res.data.data, '删除失败');
					}
					return res.data;
				});
			};
			return service;
		}]);

}(angular));
(function (angular) {
	"use strict";
	angular.module('autoReply').factory('noMatchReplyDataSvc', ['basDataSvc','platformModalSvc','nswGlobals','$q', function (basDataSvc,platformModalSvc,nswGlobals,$q) {
		var options = {
			requireAppId:true,
			uri:'keyWord/reply',
			item: {
				default: {
					content:'',
					type : 2,
					replyType:'txt'
				},
				afterCreated:function(item){
					item.appId = nswGlobals.getValue('appId');
				},
				prepareCreate: function (service, options) {
					service.filterData(options.data);
				},
				prepareUpdate: function (service, options) {
					service.filterData(options.data);
				}
			},
			list: {
				enableSearch:true,
				enablePaging:true,
				listUri: 'keyWord/attentionOrMatching',
				prepareSearchParam:function(options){
					options.type = 2;
				},
				selectionMode: 'single'
				//pageSize: 6
			}
		};
		var service = basDataSvc.createInstance(options);
		service.filterData = function filterData(data) {
			if (data.replyType === 'pic') {
				if (data.hasOwnProperty('content')) {
					delete  data.content;
				}
				if (data.hasOwnProperty('mediaId')) {
					delete  data.mediaId;
				}
			} else if (data.replyType === 'news') {
				if (data.hasOwnProperty('content')) {
					delete  data.content;
				}
				if (data.hasOwnProperty('fileId')) {
					delete  data.fileId;
				}
			} else {
				if (data.hasOwnProperty('mediaId')) {
					delete  data.mediaId;
				}
				if (data.hasOwnProperty('fileId')) {
					delete  data.fileId;
				}
			}
		};
		return service;
	}]);

}(angular));
/*global angular*/
(function(angular){
    "use strict";
	angular.module("autoReply").controller("noMatchReplyCtrl",['$scope','noMatchReplyDataSvc','basDetailCtrlSvc','nswGlobals','materialsImgDataSvc',function($scope,noMatchReplyDataSvc,basDetailCtrlSvc,nswGlobals,materialsImgDataSvc){
		basDetailCtrlSvc.createInstance($scope, noMatchReplyDataSvc);
		var initSelectTab = $scope.selectTab;
		$scope.selectTab = function selecteTab(tab){
			if(tab===1){
				$scope.currentItem.replyType = 'txt';
			}else{
				$scope.currentItem.replyType = 'pic';
			}
			initSelectTab.apply(this, arguments);
		};


		noMatchReplyDataSvc.loadData().then(function(list){
			if (list.length) {
				var currentItem = list[0];
				noMatchReplyDataSvc.filterData(currentItem);
				noMatchReplyDataSvc.setCurrentItem(currentItem);
				if (currentItem.replyType === 'pic') {
					$scope.selectTab(2);
				}
			} else {
				noMatchReplyDataSvc.createNew();
			}
		});


		$scope.imgurl = 'material/image/upload?appId=' + nswGlobals.getValue('appId');
		$scope.afterImageSelected = function afterImageSelected(image){
			$scope.keyWordImage = image;
			$scope.currentItem.fileId = image.fileId;
		};
		$scope.deleteMaterial = function deleteMaterial(){
			$scope.keyWordImage = null;
		};
		$scope.changeFile = function changeFile(img){
			$scope.keyWordImage = img;
			$scope.currentItem.fileId = img.fileId;
		};
		$scope.replaySave = function replySave(){
			$scope.save(true, $scope.formmaterials,$scope.currentItem.fileId );
			$scope.currentItem.$$new = false;
		};
		$scope.textReset = function textReset(){
			$scope.currentItem.content ='';
		//	$scope.currentItem.fileId = '';
		//	$scope.keyWordImage = null;
		};
		$scope.imgReset = function imgReset(){
				$scope.currentItem.fileId = '';
			//	$scope.keyWordImage = null;
		};





	}]);
}(angular));
/*global angular*/
(function (angular) {
	"use strict";
	angular.module("autoReply").controller("replyKeyWordCtrl", ['$scope', 'keyWordReplyDataSvc', 'basDetailCtrlSvc', 'nswGlobals', function ($scope, keyWordReplyDataSvc, basDetailCtrlSvc, nswGlobals) {
		basDetailCtrlSvc.createInstance($scope, keyWordReplyDataSvc, {});
		$scope.imgurl = 'material/image/upload?appId=' + nswGlobals.getValue('appId');

		$scope.editTitle = '新建关键词回复';
		var basSelectTab = $scope.selectTab;
		$scope.selectTab = function selectTab(tab) {
			if (tab === 1) {
				$scope.editTitle = !$scope.currentItem.id || $scope.currentItem.$$new ? '新建关键词回复' : '编辑关键词回复';
			}
			if (tab === 2) {
				//basSelectTab.call(this, 1);
				$scope.$broadcast('checkFormDirty');
			} else {
				basSelectTab.apply(this, arguments);
			}
		};

		$scope.$on('formDirtyInfo', function (e, options) {
			if (!options.stop || options.dirty === false) {
				keyWordReplyDataSvc.createNew();
				$scope.editTitle = '新建关键词回复';
				basSelectTab.call(this, 2);
			} else {
				basSelectTab.call(this, 1);
			}
		});
	}]);
}(angular));
/*global angular*/
(function (angular) {
	"use strict";
	angular.module("autoReply").controller("replyKeyWordAddCtrl", ['$scope', 'keyWordReplyDataSvc', 'basDetailCtrlSvc','nswGlobals',
		function ($scope, keyWordReplyDataSvc, basDetailCtrlSvc,nswGlobals) {
		basDetailCtrlSvc.createInstance($scope, keyWordReplyDataSvc, {notCopyCurrent: true});

		if (!$scope.currentItem.appId || $scope.currentItem.appId !== nswGlobals.getValue('appId')) {
			$scope.create();
		}

		$scope.deleteMaterial = function deleteMaterial() {
			$scope.keyWordImage = null;
		};
		$scope.changeFile = function changeFile(img) {
			$scope.keyWordImage = img;
			$scope.currentItem.fileId = img.fileId;
		};
		$scope.deleteNsw = function deleteNsw() {
			$scope.material = null;
		};

		$scope.wordSave = function wordSave() {
			$scope.formreplay.$setPristine();
			$scope.save(false,null,$scope.currentItem.ruleName);
		};

		var itemUpdated = function itemUpdated() {
			$scope.$parent.$parent.selectTab(2);
		};

		keyWordReplyDataSvc.registerItemCreated(itemUpdated);
		keyWordReplyDataSvc.registerItemUpdated(itemUpdated);

		$scope.reset = function reset() {
			var type = $scope.currentItem.replyType;
			$scope.create();
			$scope.currentItem.replyType = type;
			$scope.formreplay.$setPristine();
		};

		$scope.$on('$destroy', function () {
			keyWordReplyDataSvc.unregisterItemCreated(itemUpdated);
			keyWordReplyDataSvc.unregisterItemUpdated(itemUpdated);
		});
	}]);

}(angular));
/*global angular*/

(function (angular) {
	"use strict";
	angular.module("autoReply").controller("replyKeyWordListCtrl", ['$scope', 'keyWordReplyDataSvc', 'basListCtrlSvc', 'platformModalSvc',
		function ($scope, keyWordReplyDataSvc, basListCtrlSvc, platformModalSvc) {
			basListCtrlSvc.createInstance($scope, keyWordReplyDataSvc, {
				detailState: 'wechat.keywordautoReply'

			});

			$scope.searchOptions.filter = '';

			$scope.removeitems = function removeitems() {
				platformModalSvc.showConfirmMessage('确定要批量删除关键词回复吗？删除之后所有已录入的关键词回复信息内容都将删除无法还原。', '温馨提示').then(function () {
					keyWordReplyDataSvc.removeItems(_.map(keyWordReplyDataSvc.getSelectedItems(), 'id')).then(function () {
						if ($scope.dataList.length <= keyWordReplyDataSvc.getSelectedItems().length&&$scope.searchOptions.pageNum!==1) {
							$scope.searchOptions.pageNum--;
							$scope.searchData();
						}
					});
					//var listSize = keyWordReplyDataSvc.getSelectedItems().length;
					//$scope.searchOptions.totalRows -= listSize;

				});

			};
			$scope.editItem = function editItem(item) {
				keyWordReplyDataSvc.setCurrentItem(item);
				$scope.$parent.$parent.selectTab(1);
				$scope.$emit('tab', $scope.tab);
			};
			$scope.updateEnable = function updateEnable(data) {
				data.enable = !data.enable;
				keyWordReplyDataSvc.updata(data,null,data.ruleName);
			};


			var initRemove = $scope.remove;
			$scope.remove = function remove(item, msg) {
				msg = "确定要删除<font color='red'>" + item.ruleName + "</font>吗？删除之后所有已录入的关键词回复信息内容都将删除无法还原。";
				initRemove.call(this, item, msg,item.ruleName);
			};

			var onListLoaded = function onListLoaded() {
				$scope.isSelectAll = false;
			};


			$scope.searchData();

			keyWordReplyDataSvc.registerListLoaded(onListLoaded);

			$scope.$on('$destroy', function () {
				keyWordReplyDataSvc.unregisterListLoaded(onListLoaded);
			});
		}]);


}(angular));
/*global angular*/
(function (angular) {
	"use strict";
	angular.module("autoReply").controller("replyOnFollowCtrl", ['$scope', 'autoReplyDataSvc', 'basDetailCtrlSvc',  'materialsImgDataSvc','nswGlobals',
		function ($scope, autoReplyDataSvc, basDetailCtrlSvc, materialsImgDataSvc, nswGlobals) {
			basDetailCtrlSvc.createInstance($scope, autoReplyDataSvc);
			var initSelectTab = $scope.selectTab;
			$scope.selectTab = function selecteTab(tab) {
				if (tab === 1) {
					$scope.currentItem.replyType = 'txt';
				} else {
					$scope.currentItem.replyType = 'pic';
				}
				initSelectTab.apply(this, arguments);
			};


			autoReplyDataSvc.loadData().then(function (list) {
				if (list && list.length) {
					var currentItem = list[0];
					autoReplyDataSvc.filterData(currentItem);
					autoReplyDataSvc.setCurrentItem(currentItem);
					if (currentItem.replyType === 'pic' && currentItem.fileId) {
						$scope.selectTab(2);
					}
				} else {
					autoReplyDataSvc.createNew();
				}
			});


			$scope.imgurl = 'material/image/upload?appId=' + nswGlobals.getValue('appId');


			$scope.replaySave = function replySave() {
				$scope.save(true,$scope.formmaterials,$scope.currentItem.fileId);
				$scope.currentItem.$$new = false;
			};

			$scope.textReset = function textReset() {
				$scope.currentItem.content = '';
			};
			$scope.imgReset = function imgReset() {
				$scope.currentItem.fileId = '';
			};
			var resetForm = function resetForm() {

				autoReplyDataSvc.loadData().then(function (list) {
					if (list.length) {
						var currentItem = list[0];
						autoReplyDataSvc.setCurrentItem(currentItem);
					} else {
						autoReplyDataSvc.createNew();
					}
				});
			};
			autoReplyDataSvc.registerItemCreated(resetForm);


		}]);
}(angular));
/*globals UE*/
(function (angular) {
	"use strict";

	angular.module('platform').directive('autoReplyKeyWordList', ['platformModalSvc', function (platformModalSvc) {
		return {
			restrict: 'A',
			require: 'ngModel',
			templateUrl: globals.basAppRoute + 'auto-reply/templates/auto-reply-key-word-list.html',
			link: function (scope, element, attr, ctrl) {

				scope.deleteKeyWord = function deleteKeyWord(index) {
					scope.keyWordList.splice(index, 1);
					scope.setValue();
				};
				scope.addKeyWord = function addKeyWord() {
					scope.keyWordList = scope.keyWordList || [];

					if (scope.keyWordList.length < 10) {
						scope.keyWordList.push({name: ''});
					} else {
						platformModalSvc.showWarmingTip("关键词不能超过10个!");
					}
				};
				scope.setValue = function setValue() {
					var keyWord = _.map(_.filter(scope.keyWordList, function (o) {
						return !!o.name;
					}), 'name');
					if (keyWord.length > 0) {
						ctrl.$setViewValue(keyWord);
					}
					scope.updateRequiredValidator();
				};

				ctrl.$render = function $render() {
					scope.keyWordList = ctrl.$viewValue;
					scope.keyWordList = _.map(scope.keyWordList, function (keyword) {
						return {'name': keyword};
					});
					var checkLength = _.map(_.filter(scope.keyWordList, function (o) {
						return !!o.name;
					}), 'name');
				};

				scope.updateRequiredValidator = function updateRequiredValidator() {
					var words = _.filter((scope.keyWordList || []), function (word) {
						return word && word.name && word.name.replace(/\s*/g, '').length;
					});
					ctrl.$setValidity('required', words.length);
				};
				var requiredWatcher = scope.$watchCollection('keyWordList', scope.updateRequiredValidator);
				scope.$on('$destroy', function () {
					requiredWatcher();
				});
			}
		};
	}]);
}(angular));
(function (angular) {
	"use strict";

	angular.module('member', ['platform']).config(['$stateProvider', function ($stateProvider) {
		$stateProvider
			.state('wechat.member', {
				url: '/member',
				controller: 'memberListCtrl',
				templateUrl: globals.basAppRoute + 'member/partials/member-list-partial.html'
			})
			.state('wechat.memberDetail', {
				url: '/member-detail',
				controller: 'memberDetailCtrl',
				templateUrl: globals.basAppRoute + 'member/partials/member-detail-partial.html'
			});
	}]);

}(angular));
(function (angular) {
	"use strict";

	angular.module('member').factory('memberCtgDataSvc', ['basDataSvc', 'nswGlobals', 'platformModalSvc','$q','$http', function (basDataSvc, nswGlobals, platformModalSvc,$q,$http) {
		var options = {
			uri: 'fansTag/tag',
			requireAppId: true,
			item: {
				prepareLoad: function (service, options) {
					_.omit(options.data, 'tagId');
				},
				prepareRemove: function (service, options, item) {
					options.params.tagId = item.tagId;
					options.params.appId = item.appId;
				},
				afterCreated:function(item){
					item.appId = nswGlobals.getValue('appId');
				},
				default: {}
			},
			list: {
				prepareSearchParam:function( options){
					options.showDefault = true;
				},
				enableSearch:true,
				listUri: 'fansTag/tagList',
				selectionMode: 'single'
				//enablePaging: true
			}
		};

		var service = basDataSvc.createInstance(options),ctgSelectList;
		//replace the default create method, for we not need to set the new item as current item;
		service.createNew = function createNew(){
			var item = {};
			item.appId = nswGlobals.getValue('appId');
			return item;
		};

		service.showCreateModal = function showCreateModal() {
			options = options || {};
			options.selected = service.createNew();
			return platformModalSvc.showModal({
				templateUrl: globals.basAppRoute + 'member/partials/member-catalog-create-partial.html',
				controller: 'memberCatalogCreateCtrl',
				size: 'sm',
				options: options
			});
		};
		service.getFansCount = function getFansCount(){
			var derfer = $q.defer();
			var opt = {
				method:'get',
				url:globals.basAppRoot+'fans/getFansCount',
				params:{
					appId: nswGlobals.getValue('appId')
				}
			};
			return $http(opt).then(function(res){
				if(res.data.isSuccess){
					derfer.resolve(res.data.data);
				}else{
					derfer.reject(res.data.data);
				}
				return derfer.promise;
			});
		};
		service.getCtgDataList = function getCtgDataList(){
			var derfer = $q.defer();
			var opt = {
				method:'get',
				url:globals.basAppRoot+'fansTag/tagList',
				params:{
					appId: nswGlobals.getValue('appId'),
					showDefault:false
				}
			};
			return $http(opt).then(function(res){
				if(res.data.isSuccess){
					ctgSelectList = res.data.data;
					derfer.resolve(res.data.data);
				}else{
					derfer.reject(res.data.data);
				}
				return derfer.promise;
			});
		};
		service.getCtgDataList();
		service.showEditModal = function showEditModal(catalog) {
			options = options || {};
			options.selected =  angular.copy(catalog);
			return platformModalSvc.showModal({
				templateUrl: globals.basAppRoute + 'member/partials/member-catalog-edit-partial.html',
				controller: 'memberCatalogEditCtrl',
				size: 'sm',
				options: options
			});
		};
		service.getCtgSelectList = function getCtgSelectList(){
			return ctgSelectList;
		};

		return service;
	}]);

}(angular));
(function (angular) {
	"use strict";

	angular.module('member').factory('memberDataSvc', ['$http', 'basDataSvc', 'nswGlobals', 'platformModalSvc', 'memberCtgDataSvc','$q',
		function ($http, basDataSvc, nswGlobals, platformModalSvc, memberCtgDataSvc,$q) {
			var options = {
				uri: 'fans/fansInfo',
				requireAppId: true,
				item: {
					default: {
						//name: 'test'
					}
				},
				list: {
					enablePaging: true,
					enableSearch: true,
					pageSize: 6,
					listUri: function(){
						return memberCtgDataSvc.getCurrentItem()&& memberCtgDataSvc.getCurrentItem().name !=='黑名单' ? 'fansTag/getFansByTag': 'fans/fansList';
					},
					selectionMode: 'multi',
					prepareSearchParam:function(opts){
						if(memberCtgDataSvc.getCurrentItem()){
							if(memberCtgDataSvc.getCurrentItem().name ==='黑名单'){
								opts.groupId = (memberCtgDataSvc.getCurrentItem()||{}).groupid;
							}else {
								opts.tagId = (memberCtgDataSvc.getCurrentItem()||{}).tagId;
							}
						}
					}
				}
			};

			var service = basDataSvc.createInstance(options),
				detailDisplayList = [];

			service.toggleDetailDisplay = function toggleDetailDisplay(item) {
				if (_.find(detailDisplayList, item)) {
					_.remove(detailDisplayList, item);
				} else {
					detailDisplayList.push(item);
				}
			};

			service.isShowDetail = function isShowDetail(item) {
				return !!_.find(detailDisplayList, item);
			};

			service.switchCatalog = function switchCatalog(catalogId) {
				var selectedItems = service.getSelectedItems();
				return $http({
					method: 'post',
					url: globals.basAppRoot + 'fans/moveFansToGroup',
					data: {
						openid: _.map(selectedItems, 'openid'),
						appId: nswGlobals.getValue('appId'),
						groupid: catalogId
					}
				});
			};

			service.userTag = function userTag(arr,openid){
				var defer = $q.defer();
				var tagId = [];
				for(var i = 0;i<arr.length;i++){
					tagId.push(arr[i].tagId+'');
				}

				var options ={
					url:globals.basAppRoot+'fansTag/userTag',
					method:'put',
					params:{
						tagId:tagId,
						openId:openid,
						appId: nswGlobals.getValue('appId')
					}
				};
				if(!openid){
					options.params.openId = _.map(service.getSelectedItems(),'openid');
					options.url =globals.basAppRoot+'fansTag/batchAddUserTag';
					options.method = 'post';
				}
				return $http(options).then(function(res){
					if(res.data.isSuccess){
						defer.resolve(res.data.data);
						service.loadData();
						memberCtgDataSvc.loadData();
						platformModalSvc.showSuccessTip(res.data.data);

					}else{
						defer.reject(res.data.data);
						platformModalSvc.showWarmingTip(res.data.data);
					}
					return defer.promise;
				});


			};

			service.showRenameModal = function showRenameModal(item) {
				options = options || {};
				options.selected = angular.copy(item);
				return platformModalSvc.showModal({
					templateUrl: globals.basAppRoute + 'member/partials/member-rename-partial.html',
					controller: 'memberDetailCtrl',
					size: 'sm',
					options: options
				}).then(function (member) {
					angular.extend(item, member);
					service.updateItem(item);
				});
			};

			var itemUpdted = function itemUpdted() {
				memberCtgDataSvc.loadData();
			};

			var currentCatalogChanged = function currentCatalogChanged(){
				service.loadData();
			};

			memberCtgDataSvc.registerCurrentItemChanged(currentCatalogChanged);
			service.registerItemCreated(itemUpdted);
			service.registerItemRemoved(itemUpdted);
			service.loadData();
			return service;
		}]);

}(angular));
(function (angular) {
	"use strict";

	angular.module('member').factory('memberTagDataSvc', ['basDataSvc', 'nswGlobals', 'platformModalSvc','$q','$http', function (basDataSvc, nswGlobals, platformModalSvc,$q,$http) {


		//var service = basDataSvc.createInstance(options);
		////replace the default create method, for we not need to set the new item as current item;
		////memberCtgDataSvc.registerL
		//return service;
	}]);

}(angular));
(function (angular) {
	"use strict";

	angular.module('member').filter('memberCtg', ['memberCtgDataSvc', function (memberCtgDataSvc) {

		var memeberCtgList = [];
		var listLoaded = function listLoaded(list) {
			memeberCtgList = list;
		};

		memberCtgDataSvc.registerListLoaded(listLoaded);

		if (!memeberCtgList || !memeberCtgList.length) {
			memberCtgDataSvc.loadData();
		}

		return function (input) {
			var _input = _.parseInt(input);
			if (-100 === _input) {
				return '全部用户';
			}
			var ctg = _.find(memeberCtgList || [], {tagId: _input});
			if (ctg && ctg.name) {
				return ctg.name;
			}

			return '';
		};

	}]);

}(angular));
(function (angular) {
	"use strict";

	angular.module('member').controller('memberCatalogCreateCtrl',
		['$scope', 'basDetailCtrlSvc', 'memberCtgDataSvc', 'memberDataSvc', function ($scope, basDetailCtrlSvc, memberCtgDataSvc, memberDataSvc) {
			basDetailCtrlSvc.createInstance($scope, memberCtgDataSvc);

			$scope.saveCreate = function saveCreate() {
				memberCtgDataSvc.saveCreate($scope.modalOptions.selected,null,$scope.modalOptions.name).then(function (result) {
					$scope.closeModal(true, result);
					//memberDataSvc.loadSearchData();
				});
			};
		}]);
}(angular));
(function (angular) {
	"use strict";

	angular.module('member').controller('memberCatalogEditCtrl',
		['$scope', 'basDetailCtrlSvc', 'memberCtgDataSvc', function ($scope, basDetailCtrlSvc, memberCtgDataSvc) {
			basDetailCtrlSvc.createInstance($scope, memberCtgDataSvc);

			$scope.saveEdit = function saveEdit(){
				var selected = $scope.modalOptions.selected;
				var initCatalog = _.find(memberCtgDataSvc.getDataList(),{tagId:selected.tagId});

				memberCtgDataSvc.updateItem(selected,null,selected.name).then(function(result){
					angular.extend(initCatalog, result);
					$scope.closeModal(true,result);
				});
				/*
				memberCtgDataSvc.updateItem($scope.currentItem).then(function(result){
					$scope.closeModal(true,result.data);
				});*/
			};
		}]);
}(angular));
(function (angular) {
	"use strict";
	angular.module("member").controller("memberDetailCtrl", ['$scope', 'basDetailCtrlSvc', 'memberDataSvc',
		function ($scope, basDetailCtrlSvc, memberDataSvc) {
			basDetailCtrlSvc.createInstance($scope, memberDataSvc);
		}]);
}(angular));
(function (angular) {
	"use strict";
	angular.module("member").controller("memberListCtrl", ['$scope', 'basListCtrlSvc', 'platformModalSvc', 'memberDataSvc', 'memberCtgDataSvc',
		function ($scope, basListCtrlSvc, platformModalSvc, memberDataSvc, memberCtgDataSvc) {
			basListCtrlSvc.createInstance($scope, memberDataSvc, {
				detailState: 'wechat.memberDetail'
			});
			$scope.formOptions = {};
			$scope.formOptions.isAllSelected = false;
			$scope.options.showEmptyTip = false;
			$scope.selectArr = [];
			$scope.createCatalog = function createCatalog() {
				memberCtgDataSvc.showCreateModal();
			};

			$scope.toggleDetailDisplay = function toggleDetailDisplay(item) {
				memberDataSvc.toggleDetailDisplay(item);
			};

			$scope.isShowDetail = function isShowDetail(item) {
				return memberDataSvc.isShowDetail(item);
			};

			$scope.selectCatalog = function selectCatalog(ctg) {
				$scope.hasGroupSelected = _.isNumber(ctg.groupid);
				$scope.selectedCatalog = ctg;
				$scope.searchOptions.pageNum = 1;
				memberCtgDataSvc.setCurrentItem(ctg);
			};
			$scope.getTotal = function getTotal() {
				return $scope.Alllist;
			};

			$scope.switchToCatalog = function switchToCatalog(item, value) {
				if (item && !$scope.isItemSelected(item)) {
					$scope.selectItem(item);
				}
				if(value === 1){
					platformModalSvc.showConfirmMessage('加入黑名单后，你将无法接收该粉丝发来的消息，且该粉丝无法接收公众号发出的消息，确认加入黑名单？','温馨提示').then(function(){
						memberDataSvc.switchCatalog(value).then(function () {
							platformModalSvc.showSuccessTip('粉丝转移成功！');
							/*$scope.searchOptions.groupId = value;*/
							$scope.searchOptions.pageNum = 1;

							memberCtgDataSvc.loadData().then(function () {
								//memberCtgDataSvc.setCurrentItem(_.find(memberCtgDataSvc.getDataList(), {groupid: value}));
								memberDataSvc.loadData();
								$scope.formOptions.isAllSelected = false;
							});
						});
					});
				}else{
					platformModalSvc.showConfirmMessage('确定移出黑名单吗?移除黑名单的粉丝默认属于全部用户 ','温馨提示').then(function(){
						memberDataSvc.switchCatalog(value).then(function () {
							platformModalSvc.showSuccessTip('粉丝转移成功！');
							/*$scope.searchOptions.groupId = value;*/
							$scope.searchOptions.pageNum = 1;

							memberCtgDataSvc.loadData().then(function () {
								//memberCtgDataSvc.setCurrentItem(_.find(memberCtgDataSvc.getDataList(), {groupid: value}));
								memberDataSvc.loadData();
								$scope.formOptions.isAllSelected = false;
							});
						});
					});
				}


			};

			$scope.toggleSubCatalogs = function toggleSubCatalogs() {
				//$scope.selectCatalog({});
				$scope.showSubCatalogs = !$scope.showSubCatalogs;
			};

			$scope.getTabTitle = function getTabTitle() {
				var current = memberCtgDataSvc.getCurrentItem();
				if(current&&current.name==='黑名单'){
					return current.name + '(' + $scope.blacklist + ')';
				}
				if (!current || !current.name) {
					current = {$$key: 'all', name: '全部用户', count: $scope.getTotal()};
				}
				return current.name + '(' + ($scope.searchOptions.totalRows || 0) + ')';
			};

			$scope.removeCatalog = function removeCatalog(catalog, e) {
				e.stopPropagation();

				var tip = catalog.count ? '删除标签将会把该已有成员全部移动至未分组里。是否确定删除？' : '你确定删除此标签吗？删除后将不再显示。';

				platformModalSvc.showConfirmMessage(tip, '温馨提示').then(function () {
					memberCtgDataSvc.removeItem(catalog,catalog.name).then(function () {
						memberCtgDataSvc.loadData().then(function () {
							$scope.searchOptions.pageNum = 1;
							$scope.searchOptions.tagId =null;
							$scope.selectCatalog({});
							memberDataSvc.loadData();
							$scope.formOptions.isAllSelected = false;
						});

						platformModalSvc.showSuccessTip('删除成功');
					});
				});
			};

			$scope.editCatalog = function removeCatalog(catalog, e) {
				e.stopPropagation();
				var target = angular.copy(catalog);
				memberCtgDataSvc.showEditModal(target).then(function (result) {
					angular.extend(catalog, result);
				});
			};
			var getListChage = $scope.getList;
			$scope.getList = function getList(){
				var dataList = getListChage.apply(this);
				if($scope.currentCatalog&&$scope.currentCatalog.groupid===1){
					return  dataList;
				}else {
					return _.filter(dataList, function(o) { return o.groupid!==1; });
				}
			};
			$scope.editNickName = function editNickName(item) {
				memberDataSvc.showRenameModal(item);
			};

			$scope.isDefaultCatalog = function isDefaultCatalog(item) {
				return _.includes(['黑名单', '未分组', '星标组'], item.name);
			};

			var catalogLoaded = function catalogLoaded(items) {
				$scope.catalogList = items;
				memberCtgDataSvc.getFansCount().then(function(data){
					$scope.blacklist = data.hmdNum;
					$scope.Alllist = data.allNum;
				});
			};

			//var isDefault = true;
			var listLoaded = function listLoaded(data, isDefault) {
				$scope.formOptions.isAllSelected = false;
				$scope.options.showEmptyTip = !data.length && !isDefault;
				$scope.getTabTitle();

			};

			var currentCatalogChanged = function currentCatalogChanged(catalog) {
				$scope.currentCatalog = catalog;
			};
			$scope.deleteTag = function deleteTag(item,tag){
				item.tagid_list = _.filter(item.tagid_list,function(o){ return o.name !== tag.name;});
				memberDataSvc.userTag(item.tagid_list,item.openid);
			};

			$scope.searchData();
			memberDataSvc.registerListLoaded(listLoaded);
			memberCtgDataSvc.registerListLoaded(catalogLoaded);
			memberCtgDataSvc.loadData();
			memberCtgDataSvc.registerCurrentItemChanged(currentCatalogChanged);

			$scope.$on('$destroy', function () {
				$scope.selectCatalog({});
				memberDataSvc.unregisterListLoaded(catalogLoaded);
				memberCtgDataSvc.unregisterListLoaded(catalogLoaded);
				memberCtgDataSvc.unregisterCurrentItemChanged(currentCatalogChanged);
			});
		}]);
}(angular));
(function (angular) {
	"use strict";

	angular.module('member').directive('memberTags', ['memberCtgDataSvc','platformModalSvc','memberDataSvc',function (memberCtgDataSvc,platformModalSvc,memberDataSvc) {
		return {
			restrict: 'A',
			scope: {
				afterSelect: '&',
				createCatalog:'&',
				ctgData:'='
			},
			templateUrl: globals.basAppRoute + 'member/directives/member-tags-dir.html',
			require: 'ngModel',
			link: function (scope, element, attr, ctrl) {
			//	basListCtrlSvc.createInstance(scope, memberTagDataSvc);
				scope.tagIdList = [];
				scope.err = '';
				scope.display = attr.nswDisplay;
				scope.UI = {};
				scope.UI.show = false;
				scope.value = attr.nswValue;
				scope.memberId = attr.member;
				element.parent().find('.caret-box,.show-tag-box').click(function(e){
					if(!$(this).hasClass('disabled-btn')){
						$('.getTags .btn-cancel').click();
						if(attr.placement === 'bottom'){
							scope.UI.show = true;
						}else{
							element.addClass('member-position-bottom');
							scope.UI.show = true;
						}
					}
					scope.$apply();
					element.parent().find('[member-tags]').on('click',function(){
						e.stopPropagation();
					});
				});
				$('div[ng-controller="wechatCtrl"]').click(function(e){
					if($(e.target).find('.member-position').length){
						$('.getTags .btn-cancel').click();
					}
				});
				//memberCtgDataSvc.registerListLoaded(function(data){
				//	scope.tagList =_.filter(data, function(o) { return o.name!=='未分组'; });
				//});
				scope.tagList = scope.ctgData;
				ctrl.$render = function render() {
					scope.tagIdList = angular.copy(ctrl.$viewValue);
					angular.forEach(scope.tagIdList,function(data){
						if(data instanceof Object){
							data.isChecked = true;
						}
					});
				};
				scope.isSelected = function isSelected(item){
					if(!_.find(scope.tagIdList,function(o) { return o.tagId ===item.tagId; })){
						scope.tagIdList.push(item);
					}else{
						scope.tagIdList = _.filter(scope.tagIdList, function(o) { return o.tagId!==item.tagId; });
					}
					if(scope.tagIdList.length>3){
						scope.err = '最多只能选择3个标签';
					}else{
						scope.err = '';
					}
				};
				scope.validationTagIdList = function validationTagIdList(){
					return scope.tagIdList.length&&0<scope.tagIdList.length&&scope.tagIdList.length<=3;
				};
				scope.saveTags = function saveTags(){
					memberDataSvc.userTag(scope.tagIdList,scope.memberId).then(function(){
						scope.UI.show = false;
						ctrl.$setViewValue(scope.tagIdList);
						scope.tagIdList = [];
					},function(data){
						platformModalSvc.showWarmingTip(data);
					});

				};
				scope.close = function close(){
					scope.UI.show = false;
				};
				scope.isSelecteds = function isSelecteds(openid){
					return  !! _.find(scope.tagIdList,function(o) { return o.tagId ===openid; });

				};

				var wacher = scope.$watch('ctgData',function (newValue) {
					if(newValue){
						scope.tagList = scope.ctgData;
					}
				});
				scope.$on('$destroy',function(){

					wacher();
					memberCtgDataSvc.unregisterListLoaded();
				});
			}
		};
	}]);

}(angular));
/*global angular*/
(function (angular) {
	"use strict";
	angular.module('massMessage', ['platform']).config(['$stateProvider', '$urlRouterProvider',
		function ($stateProvider, $urlRouterProvider) {
			$urlRouterProvider.when("/wechat/massMessage", 'wechat/massMessage/detail');
			$stateProvider.state('wechat.massMessage', {
				url: '/massMessage',
				templateUrl: globals.basAppRoute + 'mass-message/partials/mass-message.html',
				controller: 'massMessageCtrl'
			}).state('wechat.massMessage.detail', {
				url: '/detail',
				templateUrl: globals.basAppRoute + 'mass-message/partials/mass-message-detail.html',
				controller: 'massMessageDetailCtrl'
			}).state('wechat.massMessage.list', {
				url: '/list',
				templateUrl: globals.basAppRoute + 'mass-message/partials/mass-message-list.html',
				controller: 'massMessageListCtrl'
			});
		}]);
}(angular));
(function (angular) {
	"use strict";
	angular.module('massMessage').factory('massMessageSvc', ['$http','$q', 'basDataSvc', 'platformModalSvc', 'nswGlobals',
		function ($http,$q, basDataSvc, platformModalSvc, nswGlobals) {
			var options = {
				requireAppId: true,
				uri:'massmsg/sendMassMsgByJob',
				item: {
					default: {
						groupid: -100,
						massType: 'txt',
						hasDatePicker:false
					},
					afterCreated:function(item){
						item.appId = nswGlobals.getValue('appId');
					},
					prepareCreate:function(service,options){
						if(options.data&&options.data.jobTime===''){
							if(options.data.hasOwnProperty('jobTime')){
								delete  options.data.jobTime;
							}
							options.url = globals.basAppRoot+'massmsg/sendMassMsg';
						}

					},
					prepareRemove:function(service, options){
						options.url = globals.basAppRoot+'massmsg/sendMassMsg';
						options.params.appId = nswGlobals.getValue('appId');
					}
				},
				list: {
					listUri: 'massmsg/massMsgList',
					enablePaging: true,
					enableSearch:true,
					pageSize: 6,
					selectionMode: 'single'
				}
			};
			var service = basDataSvc.createInstance(options);

			service.showArtcileLib = function showArtcileLib() {
				platformModalSvc.showModal({
					controller: 'articleLibCtrl',
					templateUrl: globals.basAppRoute + 'materials/templates/articles-lib.html',
					size: 'lg',
					options: {
						selected: {
							id: service.selected.key
						}
					}
				}).then(function (material) {
					return material;
				});
			};
			service.cancelJob = function cancelJob(jobId){
				var defer = $q.defer();
				var options ={
					method:'get',
					url:globals.basAppRoot+'massmsg/cancelJob',
					params:{
						jobId:jobId
					}
				};
				return $http(options).then(function(res){
					if(res.data.isSuccess){
						defer.resolve(res.data.data);
						platformModalSvc.showSuccessTip(res.data.data);
					}else{
						defer.reject(res.data.data);
						platformModalSvc.showWarmingTip(res.data.data);
					}
					return defer.promise;
				});
			};
			service.loadData();
			return service;
		}]);

}(angular));
/**
 * Created by yaoyc on 2016/5/25.
 */
(function (angular) {
	"use strict";
	angular.module("massMessage").controller("massMessageCtrl", ['$scope', '$state', 'massMessageSvc',
		function ($scope, $state, massMessageSvc) {
			$scope.tabs = {};
			var _route = '';
			$scope.selectTab = function selectTab(key, route) {
				_route = route;
				if (key === 1) {
					_.forEach($scope.tabs, function (tab, prop) {
						$scope.tabs[prop] = false;
					});
					$scope.tabs[key] = true;
					$scope.tab = key;
					if (_route) {
						$state.go('wechat.massMessage.' + _route);
					}
				}

				if (key === 2) {
					$scope.$broadcast('checkFormDirty');
				}
			};

			$scope.$on('formDirtyInfo', function (e, options) {
				if (!options.stop || options.dirty === false) {



					/*$scope.tabs[2] = true;
					 $scope.tab = 2;*/
					if (_route) {
						if ($state.current.name !== 'wechat.massMessage.' + _route) {
							_.forEach($scope.tabs, function (tab, prop) {
								$scope.tabs[prop] = false;
							});
							var tabIndex = _route === 'detail' ? 1 : 2;
							$scope.tabs[tabIndex] = true;
							$scope.tab = tabIndex;
							$state.go('wechat.massMessage.' + _route);
						}
					}
					massMessageSvc.createNew();
				} else {
					$scope.tabs[1] = true;
					$scope.tab = 1;
				}
			});
			$scope.goToList = function goToList() {
				$scope.selectTab(2, 'list');
			};

			$scope.goToDetail = function goToDetail() {
				$scope.selectTab(1, 'detail');
			};
		}]);
}(angular));
/*global angular*/
(function (angular) {
	"use strict";
	angular.module("massMessage").controller("massMessageDetailCtrl", ['$scope', 'nswGlobals', 'massMessageSvc', 'basDetailCtrlSvc', 'memberCtgDataSvc', 'platformNavigationSvc',
		function ($scope, nswGlobals, massMessageSvc, basDetailCtrlSvc, memberCtgDataSvc, platformNavigationSvc) {
			basDetailCtrlSvc.createInstance($scope, massMessageSvc, {
				notCopyCurrent: true,
				failed: {
					title: '群发失败'
				},
				tip: {
					loading: {
						message: '消息发送中...!'
					}
				}
			});
			$scope.hasDatePicker = false;
			$scope.options.groupType = -100;

			$scope.groupTypes = [{id: -100, name: '全部用户'}, {id: -99, name: '按粉丝标签选择'}];

			var init = function init() {
				$scope.options.groupType = ($scope.currentItem.groupid === -100) ? -100 : -99;
				if (!$scope.currentItem || !$scope.currentItem.massType) {
					$scope.create();
				} else if ($scope.currentItem.appId !== nswGlobals.getValue('appId')) {
					$scope.create();
				}
			};

			$scope.groupTypeSelected = function groupTypeSelected(value) {
				if (value === -100) {
					$scope.currentItem.groupid = value;
					$scope.options.groupType = -100;
				} else {
					$scope.options.groupType = -99;
				}
			};

			$scope.imgSelected = function imgSelected() {
				if ($scope.currentItem.hasOwnProperty('mediaId')) {
					delete  $scope.currentItem.mediaId;
				}
				if ($scope.currentItem.hasOwnProperty('content')) {
					delete  $scope.currentItem.content;
				}
			};

			$scope.articleSelected = function articleSelected() {
				if ($scope.currentItem.hasOwnProperty('fileId')) {
					delete  $scope.currentItem.fileId;
				}
				if ($scope.currentItem.hasOwnProperty('content')) {
					delete  $scope.currentItem.content;
				}
			};

			$scope.textChanged = function textChanged() {
				if ($scope.currentItem.hasOwnProperty('mediaId')) {
					delete  $scope.currentItem.mediaId;
				}
				if ($scope.currentItem.hasOwnProperty('fileId')) {
					delete  $scope.currentItem.fileId;
				}
			};
			$scope.getTime = function getTime(){
				$scope.currentItem.jobTime = new Date().format('yyyy-MM-dd hh:mm:ss');
			};
			$scope.reset = function reset(form) {
				var type = $scope.currentItem.massType;
				$scope.create();
				$scope.currentItem.massType = type;
				form.$setPristine();
			};

			var memberCatalogLoaded = function memberCatalogLoaded(catalogs) {
				$scope.memberCatalogs = _.filter(catalogs, function (ctg) {
					return !!ctg.count&&ctg.id!==10000;
				});
			};

			var onCurrentItemChanged = function onCurrentItemChanged(item) {
				$scope.options.groupType = item.groupid === -100 ? -100 : -99;
			};

			var onItemCreated = function onItemCreated() {
				//$scope.formMsg.$setPristine();
				$scope.goToList();
				$scope.create();
			};

			var onMenuChanged = function onMenuChanged(selectedMenu) {
				if ((selectedMenu && selectedMenu.name !== '群发消息') || !$scope.currentItem.massType) {
					massMessageSvc.createNew();
				}
			};
			var save = $scope.save;
			$scope.save = function(flog,form,saveOption){
				if(!$scope.currentItem.hasDatePicker){
					$scope.currentItem.jobTime = '';
				}
				form.$setPristine();
				save.call(flog,form,saveOption);
			};

			memberCtgDataSvc.getSearchOptions().isMass = true;
			memberCtgDataSvc.loadData();
			$scope.omitAttr(memberCtgDataSvc.getSearchOptions(), 'isMass');
			platformNavigationSvc.registerStateUpdated(onMenuChanged);
			memberCtgDataSvc.registerListLoaded(memberCatalogLoaded);
			massMessageSvc.registerCurrentItemChanged(onCurrentItemChanged);
			massMessageSvc.registerItemCreated(onItemCreated);

			//$scope.create();
			$scope.$on('$destroy', function () {
				memberCtgDataSvc.unregisterListLoaded(memberCatalogLoaded);
				massMessageSvc.unregisterCurrentItemChanged(onCurrentItemChanged);
				massMessageSvc.unregisterItemCreated(onItemCreated);
				platformNavigationSvc.unregisterStateUpdated(onMenuChanged);
			});
			init();
		}]);
}(angular));
/*global angular*/
(function (angular) {
	"use strict";
	angular.module("massMessage").controller("massMessageListCtrl", ['$scope', 'massMessageSvc', 'basListCtrlSvc', '$state',
		function ($scope, massMessageSvc, basListCtrlSvc, $state) {
			basListCtrlSvc.createInstance($scope, massMessageSvc);
			$scope.displayList = [];
			var stopSearch = false, counter = 1;
			var searchOptions = angular.copy($scope.searchOptions);

			$scope.searchData();

			//var onListLoaded = function onListLoaded(data) {
			//	var firstDisplayItem = $scope.displayList && $scope.displayList.length ? $scope.displayList[0] : {};
			//	var firstDataItem = $scope.dataList && $scope.dataList.length ? $scope.dataList[0] : {};
			//
			//	if (searchOptions.totalRows !== $scope.searchOptions.totalRows ||
			//		searchOptions.pageNum !== $scope.searchOptions.pageNum ||
			//		$scope.displayList.length !== $scope.dataList.length ||
			//		firstDisplayItem.id !== firstDataItem.id) {
			//		$scope.displayList = angular.copy(data);
			//		searchOptions = angular.copy($scope.searchOptions);
			//		counter = 1;
			//	}
			//};
			$scope.cancelJob = function cancelJob(jobId){
				massMessageSvc.cancelJob(jobId).then(function (){
						$scope.searchData();
				});
			};

		//	massMessageSvc.registerListLoaded(onListLoaded);

			$scope.$on('$destroy', function () {
				stopSearch = true;
				if($state.current&&$state.current.url === '/massMessage'){
					$scope.goToDetail();
				}
			});
		}]);
}(angular));